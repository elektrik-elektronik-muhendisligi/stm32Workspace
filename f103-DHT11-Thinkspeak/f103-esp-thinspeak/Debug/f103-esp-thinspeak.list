
f103-esp-thinspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003204  08003204  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003204  08003204  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003204  08003204  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800320c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000070  0800327c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  0800327c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad82  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a15  00000000  00000000  0002ae1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd0  00000000  00000000  0002c830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0002d400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a3d  00000000  00000000  0002def8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000093d1  00000000  00000000  00045935  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a45e  00000000  00000000  0004ed06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9164  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003490  00000000  00000000  000d91e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080030c8 	.word	0x080030c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080030c8 	.word	0x080030c8

0800014c <set_gpio_mode>:
#define OUTPUT 1
#define INPUT 0

//set DHT pin direction with given parameter
void set_gpio_mode(uint8_t pMode)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000156:	f107 0308 	add.w	r3, r7, #8
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
 800015e:	605a      	str	r2, [r3, #4]
 8000160:	609a      	str	r2, [r3, #8]
 8000162:	60da      	str	r2, [r3, #12]

	//if direction parameter OUTPUT
	if(pMode == OUTPUT)
 8000164:	79fb      	ldrb	r3, [r7, #7]
 8000166:	2b01      	cmp	r3, #1
 8000168:	d10e      	bne.n	8000188 <set_gpio_mode+0x3c>
	{
	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	  GPIO_InitStruct.Pin = DHT11_Pin;
 800016a:	2340      	movs	r3, #64	; 0x40
 800016c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800016e:	2301      	movs	r3, #1
 8000170:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000172:	2300      	movs	r3, #0
 8000174:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000176:	2303      	movs	r3, #3
 8000178:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800017a:	f107 0308 	add.w	r3, r7, #8
 800017e:	4619      	mov	r1, r3
 8000180:	480c      	ldr	r0, [pc, #48]	; (80001b4 <set_gpio_mode+0x68>)
 8000182:	f000 fee3 	bl	8000f4c <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
}
 8000186:	e010      	b.n	80001aa <set_gpio_mode+0x5e>
	}else if(pMode == INPUT)   //else if direction parameter INPUT
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d10d      	bne.n	80001aa <set_gpio_mode+0x5e>
	  GPIO_InitStruct.Pin = DHT11_Pin;
 800018e:	2340      	movs	r3, #64	; 0x40
 8000190:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000192:	2300      	movs	r3, #0
 8000194:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000196:	2300      	movs	r3, #0
 8000198:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800019a:	2303      	movs	r3, #3
 800019c:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800019e:	f107 0308 	add.w	r3, r7, #8
 80001a2:	4619      	mov	r1, r3
 80001a4:	4803      	ldr	r0, [pc, #12]	; (80001b4 <set_gpio_mode+0x68>)
 80001a6:	f000 fed1 	bl	8000f4c <HAL_GPIO_Init>
}
 80001aa:	bf00      	nop
 80001ac:	3718      	adds	r7, #24
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <readDHT11>:
	}
}

// readDHT11 funciton
uint8_t readDHT11(uint8_t *pData)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b094      	sub	sp, #80	; 0x50
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 80001c0:	2300      	movs	r3, #0
 80001c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80001c4:	2300      	movs	r3, #0
 80001c6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80001c8:	2300      	movs	r3, #0
 80001ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80001d4:	2300      	movs	r3, #0
 80001d6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80001da:	2300      	movs	r3, #0
 80001dc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80001e0:	2300      	movs	r3, #0
 80001e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t mData[40];

	//start comm
	set_gpio_mode(OUTPUT);			//set pin direction as input
 80001e6:	2001      	movs	r0, #1
 80001e8:	f7ff ffb0 	bl	800014c <set_gpio_mode>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	2140      	movs	r1, #64	; 0x40
 80001f0:	4897      	ldr	r0, [pc, #604]	; (8000450 <readDHT11+0x298>)
 80001f2:	f001 f81c 	bl	800122e <HAL_GPIO_WritePin>
	HAL_Delay(20);					//wait 20 ms in Low state
 80001f6:	2014      	movs	r0, #20
 80001f8:	f000 fd02 	bl	8000c00 <HAL_Delay>
	set_gpio_mode(INPUT);			//set pin direction as input
 80001fc:	2000      	movs	r0, #0
 80001fe:	f7ff ffa5 	bl	800014c <set_gpio_mode>

	//check dht answer
	__HAL_TIM_SET_COUNTER(&htim4, 0);				//set timer counter to zero
 8000202:	4b94      	ldr	r3, [pc, #592]	; (8000454 <readDHT11+0x29c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2200      	movs	r2, #0
 8000208:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim4) > 500) return 0;
 800020a:	e008      	b.n	800021e <readDHT11+0x66>
 800020c:	4b91      	ldr	r3, [pc, #580]	; (8000454 <readDHT11+0x29c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000212:	b29b      	uxth	r3, r3
 8000214:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000218:	d901      	bls.n	800021e <readDHT11+0x66>
 800021a:	2300      	movs	r3, #0
 800021c:	e113      	b.n	8000446 <readDHT11+0x28e>
 800021e:	2140      	movs	r1, #64	; 0x40
 8000220:	488b      	ldr	r0, [pc, #556]	; (8000450 <readDHT11+0x298>)
 8000222:	f000 ffed 	bl	8001200 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	2b01      	cmp	r3, #1
 800022a:	d0ef      	beq.n	800020c <readDHT11+0x54>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800022c:	4b89      	ldr	r3, [pc, #548]	; (8000454 <readDHT11+0x29c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2200      	movs	r2, #0
 8000232:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim4) > 500) return 0;
 8000234:	e008      	b.n	8000248 <readDHT11+0x90>
 8000236:	4b87      	ldr	r3, [pc, #540]	; (8000454 <readDHT11+0x29c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023c:	b29b      	uxth	r3, r3
 800023e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000242:	d901      	bls.n	8000248 <readDHT11+0x90>
 8000244:	2300      	movs	r3, #0
 8000246:	e0fe      	b.n	8000446 <readDHT11+0x28e>
 8000248:	2140      	movs	r1, #64	; 0x40
 800024a:	4881      	ldr	r0, [pc, #516]	; (8000450 <readDHT11+0x298>)
 800024c:	f000 ffd8 	bl	8001200 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0ef      	beq.n	8000236 <readDHT11+0x7e>
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8000256:	4b7f      	ldr	r3, [pc, #508]	; (8000454 <readDHT11+0x29c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800025c:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800025e:	4b7d      	ldr	r3, [pc, #500]	; (8000454 <readDHT11+0x29c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2200      	movs	r2, #0
 8000264:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim4) > 500) return 0;
 8000266:	e008      	b.n	800027a <readDHT11+0xc2>
 8000268:	4b7a      	ldr	r3, [pc, #488]	; (8000454 <readDHT11+0x29c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800026e:	b29b      	uxth	r3, r3
 8000270:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000274:	d901      	bls.n	800027a <readDHT11+0xc2>
 8000276:	2300      	movs	r3, #0
 8000278:	e0e5      	b.n	8000446 <readDHT11+0x28e>
 800027a:	2140      	movs	r1, #64	; 0x40
 800027c:	4874      	ldr	r0, [pc, #464]	; (8000450 <readDHT11+0x298>)
 800027e:	f000 ffbf 	bl	8001200 <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b01      	cmp	r3, #1
 8000286:	d0ef      	beq.n	8000268 <readDHT11+0xb0>
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8000288:	4b72      	ldr	r3, [pc, #456]	; (8000454 <readDHT11+0x29c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800028e:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8000290:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000292:	2b4a      	cmp	r3, #74	; 0x4a
 8000294:	d80a      	bhi.n	80002ac <readDHT11+0xf4>
 8000296:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000298:	2b55      	cmp	r3, #85	; 0x55
 800029a:	d907      	bls.n	80002ac <readDHT11+0xf4>
 800029c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800029e:	2b4a      	cmp	r3, #74	; 0x4a
 80002a0:	d804      	bhi.n	80002ac <readDHT11+0xf4>
 80002a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80002a4:	2b55      	cmp	r3, #85	; 0x55
 80002a6:	d901      	bls.n	80002ac <readDHT11+0xf4>
	{
		return 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	e0cc      	b.n	8000446 <readDHT11+0x28e>
	}

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b2:	4869      	ldr	r0, [pc, #420]	; (8000458 <readDHT11+0x2a0>)
 80002b4:	f000 ffbb 	bl	800122e <HAL_GPIO_WritePin>
	for(int j = 0; j < 40; j++)
 80002b8:	2300      	movs	r3, #0
 80002ba:	647b      	str	r3, [r7, #68]	; 0x44
 80002bc:	e04c      	b.n	8000358 <readDHT11+0x1a0>
	{
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80002be:	4b65      	ldr	r3, [pc, #404]	; (8000454 <readDHT11+0x29c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2200      	movs	r2, #0
 80002c4:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim4) > 500) return 0;
 80002c6:	e008      	b.n	80002da <readDHT11+0x122>
 80002c8:	4b62      	ldr	r3, [pc, #392]	; (8000454 <readDHT11+0x29c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002d4:	d901      	bls.n	80002da <readDHT11+0x122>
 80002d6:	2300      	movs	r3, #0
 80002d8:	e0b5      	b.n	8000446 <readDHT11+0x28e>
 80002da:	2140      	movs	r1, #64	; 0x40
 80002dc:	485c      	ldr	r0, [pc, #368]	; (8000450 <readDHT11+0x298>)
 80002de:	f000 ff8f 	bl	8001200 <HAL_GPIO_ReadPin>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0ef      	beq.n	80002c8 <readDHT11+0x110>
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80002e8:	4b5a      	ldr	r3, [pc, #360]	; (8000454 <readDHT11+0x29c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2200      	movs	r2, #0
 80002ee:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim4) > 500) return 0;
 80002f0:	e008      	b.n	8000304 <readDHT11+0x14c>
 80002f2:	4b58      	ldr	r3, [pc, #352]	; (8000454 <readDHT11+0x29c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002fe:	d901      	bls.n	8000304 <readDHT11+0x14c>
 8000300:	2300      	movs	r3, #0
 8000302:	e0a0      	b.n	8000446 <readDHT11+0x28e>
 8000304:	2140      	movs	r1, #64	; 0x40
 8000306:	4852      	ldr	r0, [pc, #328]	; (8000450 <readDHT11+0x298>)
 8000308:	f000 ff7a 	bl	8001200 <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	2b01      	cmp	r3, #1
 8000310:	d0ef      	beq.n	80002f2 <readDHT11+0x13a>
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8000312:	4b50      	ldr	r3, [pc, #320]	; (8000454 <readDHT11+0x29c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000318:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW

		if(mTime1 > 20 && mTime1 < 30)
 800031a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800031c:	2b14      	cmp	r3, #20
 800031e:	d906      	bls.n	800032e <readDHT11+0x176>
 8000320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000322:	2b1d      	cmp	r3, #29
 8000324:	d803      	bhi.n	800032e <readDHT11+0x176>
		{
			mBit = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800032c:	e008      	b.n	8000340 <readDHT11+0x188>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 800032e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000330:	2b3c      	cmp	r3, #60	; 0x3c
 8000332:	d905      	bls.n	8000340 <readDHT11+0x188>
 8000334:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000336:	2b4f      	cmp	r3, #79	; 0x4f
 8000338:	d802      	bhi.n	8000340 <readDHT11+0x188>
		{
			 mBit = 1;
 800033a:	2301      	movs	r3, #1
 800033c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8000340:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000344:	b2d9      	uxtb	r1, r3
 8000346:	f107 0208 	add.w	r2, r7, #8
 800034a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800034c:	4413      	add	r3, r2
 800034e:	460a      	mov	r2, r1
 8000350:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8000352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000354:	3301      	adds	r3, #1
 8000356:	647b      	str	r3, [r7, #68]	; 0x44
 8000358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800035a:	2b27      	cmp	r3, #39	; 0x27
 800035c:	ddaf      	ble.n	80002be <readDHT11+0x106>

	}

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 800035e:	2300      	movs	r3, #0
 8000360:	643b      	str	r3, [r7, #64]	; 0x40
 8000362:	e011      	b.n	8000388 <readDHT11+0x1d0>
	{
		humVal += mData[i];
 8000364:	f107 0208 	add.w	r2, r7, #8
 8000368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800036a:	4413      	add	r3, r2
 800036c:	781a      	ldrb	r2, [r3, #0]
 800036e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000372:	4413      	add	r3, r2
 8000374:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 8000378:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 8000382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000384:	3301      	adds	r3, #1
 8000386:	643b      	str	r3, [r7, #64]	; 0x40
 8000388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800038a:	2b07      	cmp	r3, #7
 800038c:	ddea      	ble.n	8000364 <readDHT11+0x1ac>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 800038e:	2310      	movs	r3, #16
 8000390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000392:	e011      	b.n	80003b8 <readDHT11+0x200>
	{
		tempVal += mData[i];
 8000394:	f107 0208 	add.w	r2, r7, #8
 8000398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800039a:	4413      	add	r3, r2
 800039c:	781a      	ldrb	r2, [r3, #0]
 800039e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80003a2:	4413      	add	r3, r2
 80003a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 80003a8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 80003b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003b4:	3301      	adds	r3, #1
 80003b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80003b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003ba:	2b17      	cmp	r3, #23
 80003bc:	ddea      	ble.n	8000394 <readDHT11+0x1dc>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 80003be:	2320      	movs	r3, #32
 80003c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80003c2:	e011      	b.n	80003e8 <readDHT11+0x230>
	{
		parityVal += mData[i];
 80003c4:	f107 0208 	add.w	r2, r7, #8
 80003c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003ca:	4413      	add	r3, r2
 80003cc:	781a      	ldrb	r2, [r3, #0]
 80003ce:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80003d2:	4413      	add	r3, r2
 80003d4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 80003d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 80003e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003e4:	3301      	adds	r3, #1
 80003e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80003e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003ea:	2b27      	cmp	r3, #39	; 0x27
 80003ec:	ddea      	ble.n	80003c4 <readDHT11+0x20c>
	}

	parityVal = parityVal >> 1;
 80003ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80003f2:	085b      	lsrs	r3, r3, #1
 80003f4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 80003f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80003fc:	085b      	lsrs	r3, r3, #1
 80003fe:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 8000402:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000406:	085b      	lsrs	r3, r3, #1
 8000408:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	genParity = humVal + tempVal;
 800040c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000410:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000414:	4413      	add	r3, r2
 8000416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(genParity == parityVal)
 800041a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800041e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000422:	429a      	cmp	r2, r3
 8000424:	d105      	bne.n	8000432 <readDHT11+0x27a>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042c:	480a      	ldr	r0, [pc, #40]	; (8000458 <readDHT11+0x2a0>)
 800042e:	f000 fefe 	bl	800122e <HAL_GPIO_WritePin>

	pData[0] = tempVal;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000438:	701a      	strb	r2, [r3, #0]
	pData[1] = humVal;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	3301      	adds	r3, #1
 800043e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000442:	701a      	strb	r2, [r3, #0]

	return 1;
 8000444:	2301      	movs	r3, #1
}
 8000446:	4618      	mov	r0, r3
 8000448:	3750      	adds	r7, #80	; 0x50
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40010c00 	.word	0x40010c00
 8000454:	2000009c 	.word	0x2000009c
 8000458:	40011000 	.word	0x40011000

0800045c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	recArr[buffCnt++] = recData;
 8000464:	4b0d      	ldr	r3, [pc, #52]	; (800049c <HAL_UART_RxCpltCallback+0x40>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	1c5a      	adds	r2, r3, #1
 800046a:	b2d1      	uxtb	r1, r2
 800046c:	4a0b      	ldr	r2, [pc, #44]	; (800049c <HAL_UART_RxCpltCallback+0x40>)
 800046e:	7011      	strb	r1, [r2, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <HAL_UART_RxCpltCallback+0x44>)
 8000474:	7819      	ldrb	r1, [r3, #0]
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <HAL_UART_RxCpltCallback+0x48>)
 8000478:	5499      	strb	r1, [r3, r2]
	if(buffCnt == 64) buffCnt = 0;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_UART_RxCpltCallback+0x40>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b40      	cmp	r3, #64	; 0x40
 8000480:	d102      	bne.n	8000488 <HAL_UART_RxCpltCallback+0x2c>
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <HAL_UART_RxCpltCallback+0x40>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &recData, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	4905      	ldr	r1, [pc, #20]	; (80004a0 <HAL_UART_RxCpltCallback+0x44>)
 800048c:	4806      	ldr	r0, [pc, #24]	; (80004a8 <HAL_UART_RxCpltCallback+0x4c>)
 800048e:	f001 fe80 	bl	8002192 <HAL_UART_Receive_IT>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	2000008c 	.word	0x2000008c
 80004a0:	200001ac 	.word	0x200001ac
 80004a4:	200000e4 	.word	0x200000e4
 80004a8:	2000012c 	.word	0x2000012c

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b2:	f000 fb43 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b6:	f000 f8d9 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ba:	f000 f997 	bl	80007ec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004be:	f000 f96b 	bl	8000798 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80004c2:	f000 f919 	bl	80006f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 80004c6:	4859      	ldr	r0, [pc, #356]	; (800062c <main+0x180>)
 80004c8:	f001 fb36 	bl	8001b38 <HAL_TIM_Base_Start>

  // Wifi Connection
  buffLen = sprintf(sendBuff, "AT+CWMODE_CUR=1\r\n");
 80004cc:	4a58      	ldr	r2, [pc, #352]	; (8000630 <main+0x184>)
 80004ce:	4b59      	ldr	r3, [pc, #356]	; (8000634 <main+0x188>)
 80004d0:	4615      	mov	r5, r2
 80004d2:	461c      	mov	r4, r3
 80004d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004d6:	6028      	str	r0, [r5, #0]
 80004d8:	6069      	str	r1, [r5, #4]
 80004da:	60aa      	str	r2, [r5, #8]
 80004dc:	60eb      	str	r3, [r5, #12]
 80004de:	8823      	ldrh	r3, [r4, #0]
 80004e0:	822b      	strh	r3, [r5, #16]
 80004e2:	2311      	movs	r3, #17
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b54      	ldr	r3, [pc, #336]	; (8000638 <main+0x18c>)
 80004e8:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)sendBuff, buffLen, 1000);
 80004ea:	4b53      	ldr	r3, [pc, #332]	; (8000638 <main+0x18c>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f4:	494e      	ldr	r1, [pc, #312]	; (8000630 <main+0x184>)
 80004f6:	4851      	ldr	r0, [pc, #324]	; (800063c <main+0x190>)
 80004f8:	f001 fdb9 	bl	800206e <HAL_UART_Transmit>

  buffLen = sprintf(sendBuff, "AT+CWLAP\r\n");
 80004fc:	4a4c      	ldr	r2, [pc, #304]	; (8000630 <main+0x184>)
 80004fe:	4b50      	ldr	r3, [pc, #320]	; (8000640 <main+0x194>)
 8000500:	cb03      	ldmia	r3!, {r0, r1}
 8000502:	6010      	str	r0, [r2, #0]
 8000504:	6051      	str	r1, [r2, #4]
 8000506:	8819      	ldrh	r1, [r3, #0]
 8000508:	789b      	ldrb	r3, [r3, #2]
 800050a:	8111      	strh	r1, [r2, #8]
 800050c:	7293      	strb	r3, [r2, #10]
 800050e:	230a      	movs	r3, #10
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b49      	ldr	r3, [pc, #292]	; (8000638 <main+0x18c>)
 8000514:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)sendBuff, buffLen, 1000);
 8000516:	4b48      	ldr	r3, [pc, #288]	; (8000638 <main+0x18c>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	b29a      	uxth	r2, r3
 800051c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000520:	4943      	ldr	r1, [pc, #268]	; (8000630 <main+0x184>)
 8000522:	4846      	ldr	r0, [pc, #280]	; (800063c <main+0x190>)
 8000524:	f001 fda3 	bl	800206e <HAL_UART_Transmit>

  HAL_Delay(2000);
 8000528:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800052c:	f000 fb68 	bl	8000c00 <HAL_Delay>

  buffLen = sprintf(sendBuff, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", WIFI_NAME, WIFI_PASSW);
 8000530:	4b44      	ldr	r3, [pc, #272]	; (8000644 <main+0x198>)
 8000532:	4a45      	ldr	r2, [pc, #276]	; (8000648 <main+0x19c>)
 8000534:	4945      	ldr	r1, [pc, #276]	; (800064c <main+0x1a0>)
 8000536:	483e      	ldr	r0, [pc, #248]	; (8000630 <main+0x184>)
 8000538:	f002 f9b4 	bl	80028a4 <siprintf>
 800053c:	4603      	mov	r3, r0
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b3d      	ldr	r3, [pc, #244]	; (8000638 <main+0x18c>)
 8000542:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)sendBuff, buffLen, 1000);
 8000544:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <main+0x18c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b29a      	uxth	r2, r3
 800054a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054e:	4938      	ldr	r1, [pc, #224]	; (8000630 <main+0x184>)
 8000550:	483a      	ldr	r0, [pc, #232]	; (800063c <main+0x190>)
 8000552:	f001 fd8c 	bl	800206e <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // check DHT11 is read succesfully
	  if(readDHT11(dhtval) == 1)
 8000556:	483e      	ldr	r0, [pc, #248]	; (8000650 <main+0x1a4>)
 8000558:	f7ff fe2e 	bl	80001b8 <readDHT11>
 800055c:	4603      	mov	r3, r0
 800055e:	2b01      	cmp	r3, #1
 8000560:	d15e      	bne.n	8000620 <main+0x174>
	  {
		  // connect Thinkspeak server
		  buffLen = sprintf(sendBuff, "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8000562:	4b33      	ldr	r3, [pc, #204]	; (8000630 <main+0x184>)
 8000564:	4a3b      	ldr	r2, [pc, #236]	; (8000654 <main+0x1a8>)
 8000566:	4614      	mov	r4, r2
 8000568:	469c      	mov	ip, r3
 800056a:	f104 0e20 	add.w	lr, r4, #32
 800056e:	4665      	mov	r5, ip
 8000570:	4626      	mov	r6, r4
 8000572:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000574:	6028      	str	r0, [r5, #0]
 8000576:	6069      	str	r1, [r5, #4]
 8000578:	60aa      	str	r2, [r5, #8]
 800057a:	60eb      	str	r3, [r5, #12]
 800057c:	3410      	adds	r4, #16
 800057e:	f10c 0c10 	add.w	ip, ip, #16
 8000582:	4574      	cmp	r4, lr
 8000584:	d1f3      	bne.n	800056e <main+0xc2>
 8000586:	4665      	mov	r5, ip
 8000588:	4623      	mov	r3, r4
 800058a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800058c:	6028      	str	r0, [r5, #0]
 800058e:	6069      	str	r1, [r5, #4]
 8000590:	60aa      	str	r2, [r5, #8]
 8000592:	232b      	movs	r3, #43	; 0x2b
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <main+0x18c>)
 8000598:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t *)sendBuff, buffLen, 1000);
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <main+0x18c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b29a      	uxth	r2, r3
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	4922      	ldr	r1, [pc, #136]	; (8000630 <main+0x184>)
 80005a6:	4825      	ldr	r0, [pc, #148]	; (800063c <main+0x190>)
 80005a8:	f001 fd61 	bl	800206e <HAL_UART_Transmit>
		  HAL_Delay(3000);
 80005ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005b0:	f000 fb26 	bl	8000c00 <HAL_Delay>

		  // after connection to Thingspeak prepare data to send
		  buffLen = sprintf(sendBuff, "GET /update?api_key=%s&field1=%d&field2=%d\r\n", API_KEY, dhtval[0], dhtval[1]);
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <main+0x1a4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <main+0x1a4>)
 80005bc:	785b      	ldrb	r3, [r3, #1]
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	4613      	mov	r3, r2
 80005c2:	4a25      	ldr	r2, [pc, #148]	; (8000658 <main+0x1ac>)
 80005c4:	4925      	ldr	r1, [pc, #148]	; (800065c <main+0x1b0>)
 80005c6:	481a      	ldr	r0, [pc, #104]	; (8000630 <main+0x184>)
 80005c8:	f002 f96c 	bl	80028a4 <siprintf>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <main+0x18c>)
 80005d2:	701a      	strb	r2, [r3, #0]
		  buffLen2 = sprintf(sendBuff2, "AT+CIPSEND=%d\r\n", buffLen);
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <main+0x18c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4921      	ldr	r1, [pc, #132]	; (8000660 <main+0x1b4>)
 80005dc:	4821      	ldr	r0, [pc, #132]	; (8000664 <main+0x1b8>)
 80005de:	f002 f961 	bl	80028a4 <siprintf>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <main+0x1bc>)
 80005e8:	701a      	strb	r2, [r3, #0]

		  // send preapeared buffers to Thingspeak using ESP8266
		  HAL_UART_Transmit(&huart1, (uint8_t *)sendBuff2, buffLen2, 1000);
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <main+0x1bc>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f4:	491b      	ldr	r1, [pc, #108]	; (8000664 <main+0x1b8>)
 80005f6:	4811      	ldr	r0, [pc, #68]	; (800063c <main+0x190>)
 80005f8:	f001 fd39 	bl	800206e <HAL_UART_Transmit>
		  HAL_Delay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f000 fafe 	bl	8000c00 <HAL_Delay>
		  HAL_UART_Transmit(&huart1, (uint8_t *)sendBuff, buffLen, 1000);
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <main+0x18c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b29a      	uxth	r2, r3
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	4908      	ldr	r1, [pc, #32]	; (8000630 <main+0x184>)
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <main+0x190>)
 8000612:	f001 fd2c 	bl	800206e <HAL_UART_Transmit>

		  // wait for 30sn to send new data
		  HAL_Delay(30000);
 8000616:	f247 5030 	movw	r0, #30000	; 0x7530
 800061a:	f000 faf1 	bl	8000c00 <HAL_Delay>
 800061e:	e79a      	b.n	8000556 <main+0xaa>
	  }else{
		  HAL_Delay(3000);
 8000620:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000624:	f000 faec 	bl	8000c00 <HAL_Delay>
	  if(readDHT11(dhtval) == 1)
 8000628:	e795      	b.n	8000556 <main+0xaa>
 800062a:	bf00      	nop
 800062c:	2000009c 	.word	0x2000009c
 8000630:	200001b0 	.word	0x200001b0
 8000634:	080030e0 	.word	0x080030e0
 8000638:	20000125 	.word	0x20000125
 800063c:	2000012c 	.word	0x2000012c
 8000640:	080030f4 	.word	0x080030f4
 8000644:	080031b4 	.word	0x080031b4
 8000648:	080031b0 	.word	0x080031b0
 800064c:	08003100 	.word	0x08003100
 8000650:	20000128 	.word	0x20000128
 8000654:	0800311c 	.word	0x0800311c
 8000658:	0800319c 	.word	0x0800319c
 800065c:	08003148 	.word	0x08003148
 8000660:	08003178 	.word	0x08003178
 8000664:	2000016c 	.word	0x2000016c
 8000668:	20000124 	.word	0x20000124

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b090      	sub	sp, #64	; 0x40
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	2228      	movs	r2, #40	; 0x28
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f002 f90a 	bl	8002894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fdd3 	bl	8001260 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006c0:	f000 f900 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2102      	movs	r1, #2
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f83e 	bl	8001760 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006ea:	f000 f8eb 	bl	80008c4 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3740      	adds	r7, #64	; 0x40
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_TIM4_Init+0x98>)
 8000718:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <MX_TIM4_Init+0x9c>)
 800071a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72;
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_TIM4_Init+0x98>)
 800071e:	2248      	movs	r2, #72	; 0x48
 8000720:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_TIM4_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_TIM4_Init+0x98>)
 800072a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_TIM4_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_TIM4_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800073c:	4814      	ldr	r0, [pc, #80]	; (8000790 <MX_TIM4_Init+0x98>)
 800073e:	f001 f9ab 	bl	8001a98 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000748:	f000 f8bc 	bl	80008c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	4619      	mov	r1, r3
 800075a:	480d      	ldr	r0, [pc, #52]	; (8000790 <MX_TIM4_Init+0x98>)
 800075c:	f001 fa36 	bl	8001bcc <HAL_TIM_SlaveConfigSynchro>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000766:	f000 f8ad 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	; (8000790 <MX_TIM4_Init+0x98>)
 8000778:	f001 fbce 	bl	8001f18 <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000782:	f000 f89f 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000009c 	.word	0x2000009c
 8000794:	40000800 	.word	0x40000800

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART1_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f001 fc00 	bl	8001fd4 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f873 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000012c 	.word	0x2000012c
 80007e8:	40013800 	.word	0x40013800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000800:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_GPIO_Init+0xcc>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <MX_GPIO_Init+0xcc>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_GPIO_Init+0xcc>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xcc>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xcc>)
 800081e:	f043 0320 	orr.w	r3, r3, #32
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_GPIO_Init+0xcc>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0320 	and.w	r3, r3, #32
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_GPIO_Init+0xcc>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <MX_GPIO_Init+0xcc>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_GPIO_Init+0xcc>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_GPIO_Init+0xcc>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a1a      	ldr	r2, [pc, #104]	; (80008b8 <MX_GPIO_Init+0xcc>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xcc>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	4815      	ldr	r0, [pc, #84]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000868:	f000 fce1 	bl	800122e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2140      	movs	r1, #64	; 0x40
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <MX_GPIO_Init+0xd4>)
 8000872:	f000 fcdc 	bl	800122e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2302      	movs	r3, #2
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <MX_GPIO_Init+0xd0>)
 8000890:	f000 fb5c 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_GPIO_Init+0xd4>)
 80008ac:	f000 fb4e 	bl	8000f4c <HAL_GPIO_Init>

}
 80008b0:	bf00      	nop
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40011000 	.word	0x40011000
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ca:	e7fe      	b.n	80008ca <Error_Handler+0x6>

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_MspInit+0x5c>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <HAL_MspInit+0x5c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_MspInit+0x5c>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x5c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <HAL_MspInit+0x5c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x5c>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_MspInit+0x60>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_MspInit+0x60>)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	40021000 	.word	0x40021000
 800092c:	40010000 	.word	0x40010000

08000930 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a09      	ldr	r2, [pc, #36]	; (8000964 <HAL_TIM_Base_MspInit+0x34>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d10b      	bne.n	800095a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_TIM_Base_MspInit+0x38>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_TIM_Base_MspInit+0x38>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_TIM_Base_MspInit+0x38>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40000800 	.word	0x40000800
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <HAL_UART_MspInit+0x9c>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d139      	bne.n	8000a00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <HAL_UART_MspInit+0xa0>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <HAL_UART_MspInit+0xa0>)
 8000992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_UART_MspInit+0xa0>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_UART_MspInit+0xa0>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <HAL_UART_MspInit+0xa0>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_UART_MspInit+0xa0>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4619      	mov	r1, r3
 80009d0:	480f      	ldr	r0, [pc, #60]	; (8000a10 <HAL_UART_MspInit+0xa4>)
 80009d2:	f000 fabb 	bl	8000f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	4809      	ldr	r0, [pc, #36]	; (8000a10 <HAL_UART_MspInit+0xa4>)
 80009ec:	f000 faae 	bl	8000f4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2025      	movs	r0, #37	; 0x25
 80009f6:	f000 f9fc 	bl	8000df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009fa:	2025      	movs	r0, #37	; 0x25
 80009fc:	f000 fa15 	bl	8000e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010800 	.word	0x40010800

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 f8b5 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <USART1_IRQHandler+0x10>)
 8000a6a:	f001 fbe7 	bl	800223c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000012c 	.word	0x2000012c

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f001 feca 	bl	8002840 <__errno>
 8000aac:	4602      	mov	r2, r0
 8000aae:	230c      	movs	r3, #12
 8000ab0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20005000 	.word	0x20005000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	20000090 	.word	0x20000090
 8000ae0:	200001f8 	.word	0x200001f8

08000ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000af0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000af2:	e003      	b.n	8000afc <LoopCopyDataInit>

08000af4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000af6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000af8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000afa:	3104      	adds	r1, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b04:	d3f6      	bcc.n	8000af4 <CopyDataInit>
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b08:	e002      	b.n	8000b10 <LoopFillZerobss>

08000b0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b0c:	f842 3b04 	str.w	r3, [r2], #4

08000b10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b14:	d3f9      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b16:	f7ff ffe5 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f001 fe97 	bl	800284c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fcc5 	bl	80004ac <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r3, =_sidata
 8000b24:	0800320c 	.word	0x0800320c
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b2c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000b30:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000b34:	200001f8 	.word	0x200001f8

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f945 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff feb8 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f95d 	bl	8000e46 <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f925 	bl	8000df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <HAL_IncTick+0x20>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000008 	.word	0x20000008
 8000be8:	200001f0 	.word	0x200001f0

08000bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	200001f0 	.word	0x200001f0

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff fff0 	bl	8000bec <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_Delay+0x40>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffe0 	bl	8000bec <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000008 	.word	0x20000008

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4906      	ldr	r1, [pc, #24]	; (8000cdc <__NVIC_EnableIRQ+0x34>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff90 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff2d 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff42 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff90 	bl	8000d34 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5f 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff35 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffa2 	bl	8000d98 <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d005      	beq.n	8000e82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2204      	movs	r2, #4
 8000e7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e051      	b.n	8000f26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 020e 	bic.w	r2, r2, #14
 8000e90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0201 	bic.w	r2, r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <HAL_DMA_Abort_IT+0xd0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d029      	beq.n	8000f00 <HAL_DMA_Abort_IT+0xa0>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <HAL_DMA_Abort_IT+0xd4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d022      	beq.n	8000efc <HAL_DMA_Abort_IT+0x9c>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <HAL_DMA_Abort_IT+0xd8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d01a      	beq.n	8000ef6 <HAL_DMA_Abort_IT+0x96>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_DMA_Abort_IT+0xdc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d012      	beq.n	8000ef0 <HAL_DMA_Abort_IT+0x90>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <HAL_DMA_Abort_IT+0xe0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d00a      	beq.n	8000eea <HAL_DMA_Abort_IT+0x8a>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <HAL_DMA_Abort_IT+0xe4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d102      	bne.n	8000ee4 <HAL_DMA_Abort_IT+0x84>
 8000ede:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ee2:	e00e      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ee8:	e00b      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eee:	e008      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef4:	e005      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	e002      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000efc:	2310      	movs	r3, #16
 8000efe:	e000      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <HAL_DMA_Abort_IT+0xe8>)
 8000f04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	4798      	blx	r3
    } 
  }
  return status;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020008 	.word	0x40020008
 8000f34:	4002001c 	.word	0x4002001c
 8000f38:	40020030 	.word	0x40020030
 8000f3c:	40020044 	.word	0x40020044
 8000f40:	40020058 	.word	0x40020058
 8000f44:	4002006c 	.word	0x4002006c
 8000f48:	40020000 	.word	0x40020000

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b08b      	sub	sp, #44	; 0x2c
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	e127      	b.n	80011b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f60:	2201      	movs	r2, #1
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8116 	bne.w	80011aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b12      	cmp	r3, #18
 8000f84:	d034      	beq.n	8000ff0 <HAL_GPIO_Init+0xa4>
 8000f86:	2b12      	cmp	r3, #18
 8000f88:	d80d      	bhi.n	8000fa6 <HAL_GPIO_Init+0x5a>
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d02b      	beq.n	8000fe6 <HAL_GPIO_Init+0x9a>
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d804      	bhi.n	8000f9c <HAL_GPIO_Init+0x50>
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d031      	beq.n	8000ffa <HAL_GPIO_Init+0xae>
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d01c      	beq.n	8000fd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f9a:	e048      	b.n	800102e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d043      	beq.n	8001028 <HAL_GPIO_Init+0xdc>
 8000fa0:	2b11      	cmp	r3, #17
 8000fa2:	d01b      	beq.n	8000fdc <HAL_GPIO_Init+0x90>
          break;
 8000fa4:	e043      	b.n	800102e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fa6:	4a89      	ldr	r2, [pc, #548]	; (80011cc <HAL_GPIO_Init+0x280>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d026      	beq.n	8000ffa <HAL_GPIO_Init+0xae>
 8000fac:	4a87      	ldr	r2, [pc, #540]	; (80011cc <HAL_GPIO_Init+0x280>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d806      	bhi.n	8000fc0 <HAL_GPIO_Init+0x74>
 8000fb2:	4a87      	ldr	r2, [pc, #540]	; (80011d0 <HAL_GPIO_Init+0x284>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d020      	beq.n	8000ffa <HAL_GPIO_Init+0xae>
 8000fb8:	4a86      	ldr	r2, [pc, #536]	; (80011d4 <HAL_GPIO_Init+0x288>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01d      	beq.n	8000ffa <HAL_GPIO_Init+0xae>
          break;
 8000fbe:	e036      	b.n	800102e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fc0:	4a85      	ldr	r2, [pc, #532]	; (80011d8 <HAL_GPIO_Init+0x28c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0xae>
 8000fc6:	4a85      	ldr	r2, [pc, #532]	; (80011dc <HAL_GPIO_Init+0x290>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d016      	beq.n	8000ffa <HAL_GPIO_Init+0xae>
 8000fcc:	4a84      	ldr	r2, [pc, #528]	; (80011e0 <HAL_GPIO_Init+0x294>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0xae>
          break;
 8000fd2:	e02c      	b.n	800102e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e028      	b.n	800102e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	623b      	str	r3, [r7, #32]
          break;
 8000fe4:	e023      	b.n	800102e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	3308      	adds	r3, #8
 8000fec:	623b      	str	r3, [r7, #32]
          break;
 8000fee:	e01e      	b.n	800102e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	330c      	adds	r3, #12
 8000ff6:	623b      	str	r3, [r7, #32]
          break;
 8000ff8:	e019      	b.n	800102e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d102      	bne.n	8001008 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001002:	2304      	movs	r3, #4
 8001004:	623b      	str	r3, [r7, #32]
          break;
 8001006:	e012      	b.n	800102e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001010:	2308      	movs	r3, #8
 8001012:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	611a      	str	r2, [r3, #16]
          break;
 800101a:	e008      	b.n	800102e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800101c:	2308      	movs	r3, #8
 800101e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69fa      	ldr	r2, [r7, #28]
 8001024:	615a      	str	r2, [r3, #20]
          break;
 8001026:	e002      	b.n	800102e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	2bff      	cmp	r3, #255	; 0xff
 8001032:	d801      	bhi.n	8001038 <HAL_GPIO_Init+0xec>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	e001      	b.n	800103c <HAL_GPIO_Init+0xf0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3304      	adds	r3, #4
 800103c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	2bff      	cmp	r3, #255	; 0xff
 8001042:	d802      	bhi.n	800104a <HAL_GPIO_Init+0xfe>
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	e002      	b.n	8001050 <HAL_GPIO_Init+0x104>
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	3b08      	subs	r3, #8
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	210f      	movs	r1, #15
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	401a      	ands	r2, r3
 8001062:	6a39      	ldr	r1, [r7, #32]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	431a      	orrs	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 8096 	beq.w	80011aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800107e:	4b59      	ldr	r3, [pc, #356]	; (80011e4 <HAL_GPIO_Init+0x298>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a58      	ldr	r2, [pc, #352]	; (80011e4 <HAL_GPIO_Init+0x298>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b56      	ldr	r3, [pc, #344]	; (80011e4 <HAL_GPIO_Init+0x298>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001096:	4a54      	ldr	r2, [pc, #336]	; (80011e8 <HAL_GPIO_Init+0x29c>)
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4013      	ands	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <HAL_GPIO_Init+0x2a0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x19e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4a      	ldr	r2, [pc, #296]	; (80011f0 <HAL_GPIO_Init+0x2a4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x19a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a49      	ldr	r2, [pc, #292]	; (80011f4 <HAL_GPIO_Init+0x2a8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x196>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_GPIO_Init+0x2ac>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x192>
 80010da:	2303      	movs	r3, #3
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x1a0>
 80010de:	2304      	movs	r3, #4
 80010e0:	e004      	b.n	80010ec <HAL_GPIO_Init+0x1a0>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_Init+0x1a0>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x1a0>
 80010ea:	2300      	movs	r3, #0
 80010ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4093      	lsls	r3, r2
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010fc:	493a      	ldr	r1, [pc, #232]	; (80011e8 <HAL_GPIO_Init+0x29c>)
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001116:	4b39      	ldr	r3, [pc, #228]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4938      	ldr	r1, [pc, #224]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
 8001122:	e006      	b.n	8001132 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001124:	4b35      	ldr	r3, [pc, #212]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	43db      	mvns	r3, r3
 800112c:	4933      	ldr	r1, [pc, #204]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 800112e:	4013      	ands	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	492e      	ldr	r1, [pc, #184]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	43db      	mvns	r3, r3
 8001154:	4929      	ldr	r1, [pc, #164]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8001156:	4013      	ands	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	4924      	ldr	r1, [pc, #144]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	43db      	mvns	r3, r3
 800117c:	491f      	ldr	r1, [pc, #124]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 800117e:	4013      	ands	r3, r2
 8001180:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	491a      	ldr	r1, [pc, #104]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	60cb      	str	r3, [r1, #12]
 800119a:	e006      	b.n	80011aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	4915      	ldr	r1, [pc, #84]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	3301      	adds	r3, #1
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f47f aed0 	bne.w	8000f60 <HAL_GPIO_Init+0x14>
  }
}
 80011c0:	bf00      	nop
 80011c2:	372c      	adds	r7, #44	; 0x2c
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	10210000 	.word	0x10210000
 80011d0:	10110000 	.word	0x10110000
 80011d4:	10120000 	.word	0x10120000
 80011d8:	10310000 	.word	0x10310000
 80011dc:	10320000 	.word	0x10320000
 80011e0:	10220000 	.word	0x10220000
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000
 80011ec:	40010800 	.word	0x40010800
 80011f0:	40010c00 	.word	0x40010c00
 80011f4:	40011000 	.word	0x40011000
 80011f8:	40011400 	.word	0x40011400
 80011fc:	40010400 	.word	0x40010400

08001200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e001      	b.n	8001222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	807b      	strh	r3, [r7, #2]
 800123a:	4613      	mov	r3, r2
 800123c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800123e:	787b      	ldrb	r3, [r7, #1]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800124a:	e003      	b.n	8001254 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	041a      	lsls	r2, r3, #16
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	611a      	str	r2, [r3, #16]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
	...

08001260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e26c      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8087 	beq.w	800138e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001280:	4b92      	ldr	r3, [pc, #584]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b04      	cmp	r3, #4
 800128a:	d00c      	beq.n	80012a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800128c:	4b8f      	ldr	r3, [pc, #572]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b08      	cmp	r3, #8
 8001296:	d112      	bne.n	80012be <HAL_RCC_OscConfig+0x5e>
 8001298:	4b8c      	ldr	r3, [pc, #560]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a4:	d10b      	bne.n	80012be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a6:	4b89      	ldr	r3, [pc, #548]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d06c      	beq.n	800138c <HAL_RCC_OscConfig+0x12c>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d168      	bne.n	800138c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e246      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x76>
 80012c8:	4b80      	ldr	r3, [pc, #512]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a7f      	ldr	r2, [pc, #508]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e02e      	b.n	8001334 <HAL_RCC_OscConfig+0xd4>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x98>
 80012de:	4b7b      	ldr	r3, [pc, #492]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a7a      	ldr	r2, [pc, #488]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b78      	ldr	r3, [pc, #480]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a77      	ldr	r2, [pc, #476]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e01d      	b.n	8001334 <HAL_RCC_OscConfig+0xd4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0xbc>
 8001302:	4b72      	ldr	r3, [pc, #456]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a71      	ldr	r2, [pc, #452]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e00b      	b.n	8001334 <HAL_RCC_OscConfig+0xd4>
 800131c:	4b6b      	ldr	r3, [pc, #428]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a6a      	ldr	r2, [pc, #424]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b68      	ldr	r3, [pc, #416]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a67      	ldr	r2, [pc, #412]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001332:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fc56 	bl	8000bec <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fc52 	bl	8000bec <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1fa      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	4b5d      	ldr	r3, [pc, #372]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0xe4>
 8001362:	e014      	b.n	800138e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fc42 	bl	8000bec <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fc3e 	bl	8000bec <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e1e6      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	4b53      	ldr	r3, [pc, #332]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x10c>
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d063      	beq.n	8001462 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800139a:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013a6:	4b49      	ldr	r3, [pc, #292]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d11c      	bne.n	80013ec <HAL_RCC_OscConfig+0x18c>
 80013b2:	4b46      	ldr	r3, [pc, #280]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d116      	bne.n	80013ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	4b43      	ldr	r3, [pc, #268]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x176>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e1ba      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4939      	ldr	r1, [pc, #228]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	e03a      	b.n	8001462 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d020      	beq.n	8001436 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fbf7 	bl	8000bec <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fbf3 	bl	8000bec <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e19b      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4927      	ldr	r1, [pc, #156]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fbd6 	bl	8000bec <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001444:	f7ff fbd2 	bl	8000bec <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e17a      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d03a      	beq.n	80014e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d019      	beq.n	80014aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_RCC_OscConfig+0x274>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff fbb6 	bl	8000bec <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff fbb2 	bl	8000bec <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e15a      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f000 fada 	bl	8001a5c <RCC_Delay>
 80014a8:	e01c      	b.n	80014e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_RCC_OscConfig+0x274>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff fb9c 	bl	8000bec <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b6:	e00f      	b.n	80014d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fb98 	bl	8000bec <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d908      	bls.n	80014d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e140      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	42420000 	.word	0x42420000
 80014d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b9e      	ldr	r3, [pc, #632]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1e9      	bne.n	80014b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a6 	beq.w	800163e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b97      	ldr	r3, [pc, #604]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10d      	bne.n	800151e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b94      	ldr	r3, [pc, #592]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a93      	ldr	r2, [pc, #588]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b91      	ldr	r3, [pc, #580]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b8e      	ldr	r3, [pc, #568]	; (8001758 <HAL_RCC_OscConfig+0x4f8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b8b      	ldr	r3, [pc, #556]	; (8001758 <HAL_RCC_OscConfig+0x4f8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a8a      	ldr	r2, [pc, #552]	; (8001758 <HAL_RCC_OscConfig+0x4f8>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff fb59 	bl	8000bec <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153e:	f7ff fb55 	bl	8000bec <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b64      	cmp	r3, #100	; 0x64
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0fd      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	4b81      	ldr	r3, [pc, #516]	; (8001758 <HAL_RCC_OscConfig+0x4f8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x312>
 8001564:	4b7b      	ldr	r3, [pc, #492]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a7a      	ldr	r2, [pc, #488]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6213      	str	r3, [r2, #32]
 8001570:	e02d      	b.n	80015ce <HAL_RCC_OscConfig+0x36e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x334>
 800157a:	4b76      	ldr	r3, [pc, #472]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a75      	ldr	r2, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6213      	str	r3, [r2, #32]
 8001586:	4b73      	ldr	r3, [pc, #460]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4a72      	ldr	r2, [pc, #456]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	f023 0304 	bic.w	r3, r3, #4
 8001590:	6213      	str	r3, [r2, #32]
 8001592:	e01c      	b.n	80015ce <HAL_RCC_OscConfig+0x36e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d10c      	bne.n	80015b6 <HAL_RCC_OscConfig+0x356>
 800159c:	4b6d      	ldr	r3, [pc, #436]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a6c      	ldr	r2, [pc, #432]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6213      	str	r3, [r2, #32]
 80015a8:	4b6a      	ldr	r3, [pc, #424]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a69      	ldr	r2, [pc, #420]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	e00b      	b.n	80015ce <HAL_RCC_OscConfig+0x36e>
 80015b6:	4b67      	ldr	r3, [pc, #412]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4a66      	ldr	r2, [pc, #408]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6213      	str	r3, [r2, #32]
 80015c2:	4b64      	ldr	r3, [pc, #400]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4a63      	ldr	r2, [pc, #396]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	f023 0304 	bic.w	r3, r3, #4
 80015cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d015      	beq.n	8001602 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fb09 	bl	8000bec <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff fb05 	bl	8000bec <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0ab      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	4b57      	ldr	r3, [pc, #348]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0ee      	beq.n	80015de <HAL_RCC_OscConfig+0x37e>
 8001600:	e014      	b.n	800162c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff faf3 	bl	8000bec <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff faef 	bl	8000bec <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f241 3288 	movw	r2, #5000	; 0x1388
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e095      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	4b4c      	ldr	r3, [pc, #304]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1ee      	bne.n	800160a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d105      	bne.n	800163e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001632:	4b48      	ldr	r3, [pc, #288]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a47      	ldr	r2, [pc, #284]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8081 	beq.w	800174a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001648:	4b42      	ldr	r3, [pc, #264]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b08      	cmp	r3, #8
 8001652:	d061      	beq.n	8001718 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d146      	bne.n	80016ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_OscConfig+0x4fc>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fac3 	bl	8000bec <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fabf 	bl	8000bec <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e067      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167c:	4b35      	ldr	r3, [pc, #212]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001690:	d108      	bne.n	80016a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	492d      	ldr	r1, [pc, #180]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a19      	ldr	r1, [r3, #32]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	430b      	orrs	r3, r1
 80016b6:	4927      	ldr	r1, [pc, #156]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_RCC_OscConfig+0x4fc>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff fa93 	bl	8000bec <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff fa8f 	bl	8000bec <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e037      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x46a>
 80016e8:	e02f      	b.n	800174a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_RCC_OscConfig+0x4fc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fa7c 	bl	8000bec <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fa78 	bl	8000bec <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e020      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x498>
 8001716:	e018      	b.n	800174a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e013      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	429a      	cmp	r2, r3
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	40007000 	.word	0x40007000
 800175c:	42420060 	.word	0x42420060

08001760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0d0      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d910      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 0207 	bic.w	r2, r3, #7
 800178a:	4965      	ldr	r1, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d040      	beq.n	8001880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d115      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e073      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06b      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4936      	ldr	r1, [pc, #216]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001850:	f7ff f9cc 	bl	8000bec <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff f9c8 	bl	8000bec <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e053      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d210      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 0207 	bic.w	r2, r3, #7
 8001896:	4922      	ldr	r1, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4601      	mov	r1, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	fa21 f303 	lsr.w	r3, r1, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1cc>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1d0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f92a 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40022000 	.word	0x40022000
 8001924:	40021000 	.word	0x40021000
 8001928:	080031b8 	.word	0x080031b8
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	b490      	push	{r4, r7}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800193a:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800193c:	1d3c      	adds	r4, r7, #4
 800193e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800195e:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b04      	cmp	r3, #4
 800196c:	d002      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x40>
 800196e:	2b08      	cmp	r3, #8
 8001970:	d003      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x46>
 8001972:	e02d      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001976:	623b      	str	r3, [r7, #32]
      break;
 8001978:	e02d      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	0c9b      	lsrs	r3, r3, #18
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001986:	4413      	add	r3, r2
 8001988:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800198c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	0c5b      	lsrs	r3, r3, #17
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019a6:	4413      	add	r3, r2
 80019a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019b2:	fb02 f203 	mul.w	r2, r2, r3
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	e004      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	623b      	str	r3, [r7, #32]
      break;
 80019ce:	e002      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019d2:	623b      	str	r3, [r7, #32]
      break;
 80019d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d6:	6a3b      	ldr	r3, [r7, #32]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc90      	pop	{r4, r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	08003188 	.word	0x08003188
 80019e8:	08003198 	.word	0x08003198
 80019ec:	40021000 	.word	0x40021000
 80019f0:	007a1200 	.word	0x007a1200
 80019f4:	003d0900 	.word	0x003d0900

080019f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019fc:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000000 	.word	0x20000000

08001a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a10:	f7ff fff2 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a14:	4601      	mov	r1, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	080031c8 	.word	0x080031c8

08001a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	0adb      	lsrs	r3, r3, #11
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	080031c8 	.word	0x080031c8

08001a5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <RCC_Delay+0x34>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <RCC_Delay+0x38>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0a5b      	lsrs	r3, r3, #9
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a78:	bf00      	nop
  }
  while (Delay --);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1e5a      	subs	r2, r3, #1
 8001a7e:	60fa      	str	r2, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f9      	bne.n	8001a78 <RCC_Delay+0x1c>
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000
 8001a94:	10624dd3 	.word	0x10624dd3

08001a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e041      	b.n	8001b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7fe ff36 	bl	8000930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f000 f8ba 	bl	8001c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d001      	beq.n	8001b50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <HAL_TIM_Base_Start+0x88>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00e      	beq.n	8001b80 <HAL_TIM_Base_Start+0x48>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6a:	d009      	beq.n	8001b80 <HAL_TIM_Base_Start+0x48>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <HAL_TIM_Base_Start+0x8c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d004      	beq.n	8001b80 <HAL_TIM_Base_Start+0x48>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <HAL_TIM_Base_Start+0x90>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d111      	bne.n	8001ba4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d010      	beq.n	8001bb4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba2:	e007      	b.n	8001bb4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40000400 	.word	0x40000400
 8001bc8:	40000800 	.word	0x40000800

08001bcc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e031      	b.n	8001c48 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f88c 	bl	8001d14 <TIM_SlaveTimer_SetConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e018      	b.n	8001c48 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c24:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c34:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <TIM_Base_SetConfig+0xb8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d00b      	beq.n	8001c80 <TIM_Base_SetConfig+0x30>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6e:	d007      	beq.n	8001c80 <TIM_Base_SetConfig+0x30>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <TIM_Base_SetConfig+0xbc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d003      	beq.n	8001c80 <TIM_Base_SetConfig+0x30>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <TIM_Base_SetConfig+0xc0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d108      	bne.n	8001c92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <TIM_Base_SetConfig+0xb8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00b      	beq.n	8001cb2 <TIM_Base_SetConfig+0x62>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca0:	d007      	beq.n	8001cb2 <TIM_Base_SetConfig+0x62>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <TIM_Base_SetConfig+0xbc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d003      	beq.n	8001cb2 <TIM_Base_SetConfig+0x62>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <TIM_Base_SetConfig+0xc0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d108      	bne.n	8001cc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <TIM_Base_SetConfig+0xb8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d103      	bne.n	8001cf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	615a      	str	r2, [r3, #20]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40012c00 	.word	0x40012c00
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800

08001d14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f023 0307 	bic.w	r3, r3, #7
 8001d3e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b30      	cmp	r3, #48	; 0x30
 8001d58:	d05c      	beq.n	8001e14 <TIM_SlaveTimer_SetConfig+0x100>
 8001d5a:	2b30      	cmp	r3, #48	; 0x30
 8001d5c:	d806      	bhi.n	8001d6c <TIM_SlaveTimer_SetConfig+0x58>
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d058      	beq.n	8001e14 <TIM_SlaveTimer_SetConfig+0x100>
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d056      	beq.n	8001e14 <TIM_SlaveTimer_SetConfig+0x100>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d054      	beq.n	8001e14 <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8001d6a:	e054      	b.n	8001e16 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8001d6c:	2b50      	cmp	r3, #80	; 0x50
 8001d6e:	d03d      	beq.n	8001dec <TIM_SlaveTimer_SetConfig+0xd8>
 8001d70:	2b50      	cmp	r3, #80	; 0x50
 8001d72:	d802      	bhi.n	8001d7a <TIM_SlaveTimer_SetConfig+0x66>
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d010      	beq.n	8001d9a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8001d78:	e04d      	b.n	8001e16 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8001d7a:	2b60      	cmp	r3, #96	; 0x60
 8001d7c:	d040      	beq.n	8001e00 <TIM_SlaveTimer_SetConfig+0xec>
 8001d7e:	2b70      	cmp	r3, #112	; 0x70
 8001d80:	d000      	beq.n	8001d84 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8001d82:	e048      	b.n	8001e16 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68d9      	ldr	r1, [r3, #12]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f000 f8a1 	bl	8001eda <TIM_ETR_SetConfig>
      break;
 8001d98:	e03d      	b.n	8001e16 <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d101      	bne.n	8001da6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e038      	b.n	8001e18 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6a1a      	ldr	r2, [r3, #32]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dcc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	621a      	str	r2, [r3, #32]
      break;
 8001dea:	e014      	b.n	8001e16 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f000 f811 	bl	8001e20 <TIM_TI1_ConfigInputStage>
      break;
 8001dfe:	e00a      	b.n	8001e16 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6899      	ldr	r1, [r3, #8]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f000 f835 	bl	8001e7c <TIM_TI2_ConfigInputStage>
      break;
 8001e12:	e000      	b.n	8001e16 <TIM_SlaveTimer_SetConfig+0x102>
        break;
 8001e14:	bf00      	nop
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	f023 0201 	bic.w	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f023 030a 	bic.w	r3, r3, #10
 8001e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	621a      	str	r2, [r3, #32]
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f023 0210 	bic.w	r2, r3, #16
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ea6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	031b      	lsls	r3, r3, #12
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	621a      	str	r2, [r3, #32]
}
 8001ed0:	bf00      	nop
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b087      	sub	sp, #28
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ef4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	021a      	lsls	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	609a      	str	r2, [r3, #8]
}
 8001f0e:	bf00      	nop
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e046      	b.n	8001fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7c:	d009      	beq.n	8001f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d004      	beq.n	8001f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10c      	bne.n	8001fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40000800 	.word	0x40000800

08001fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e03f      	b.n	8002066 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fcb6 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2224      	movs	r2, #36	; 0x24
 8002004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fb83 	bl	8002724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800202c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800203c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800204c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b08a      	sub	sp, #40	; 0x28
 8002072:	af02      	add	r7, sp, #8
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4613      	mov	r3, r2
 800207c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b20      	cmp	r3, #32
 800208c:	d17c      	bne.n	8002188 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_UART_Transmit+0x2c>
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e075      	b.n	800218a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_UART_Transmit+0x3e>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e06e      	b.n	800218a <HAL_UART_Transmit+0x11c>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2221      	movs	r2, #33	; 0x21
 80020be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80020c2:	f7fe fd93 	bl	8000bec <HAL_GetTick>
 80020c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	88fa      	ldrh	r2, [r7, #6]
 80020cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	88fa      	ldrh	r2, [r7, #6]
 80020d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020dc:	d108      	bne.n	80020f0 <HAL_UART_Transmit+0x82>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d104      	bne.n	80020f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	e003      	b.n	80020f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002100:	e02a      	b.n	8002158 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f9a7 	bl	8002460 <UART_WaitOnFlagUntilTimeout>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e036      	b.n	800218a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10b      	bne.n	800213a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002130:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3302      	adds	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e007      	b.n	800214a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1cf      	bne.n	8002102 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2200      	movs	r2, #0
 800216a:	2140      	movs	r1, #64	; 0x40
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f977 	bl	8002460 <UART_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e006      	b.n	800218a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	e000      	b.n	800218a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	4613      	mov	r3, r2
 800219e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d140      	bne.n	800222e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_UART_Receive_IT+0x26>
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e039      	b.n	8002230 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Receive_IT+0x38>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e032      	b.n	8002230 <HAL_UART_Receive_IT+0x9e>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	88fa      	ldrh	r2, [r7, #6]
 80021dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	88fa      	ldrh	r2, [r7, #6]
 80021e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2222      	movs	r2, #34	; 0x22
 80021ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002208:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0220 	orr.w	r2, r2, #32
 8002228:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
  }
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
	...

0800223c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_UART_IRQHandler+0x52>
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f9cc 	bl	8002624 <UART_Receive_IT>
      return;
 800228c:	e0d1      	b.n	8002432 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80b0 	beq.w	80023f6 <HAL_UART_IRQHandler+0x1ba>
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_UART_IRQHandler+0x70>
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80a5 	beq.w	80023f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_UART_IRQHandler+0x90>
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_UART_IRQHandler+0xb0>
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	f043 0202 	orr.w	r2, r3, #2
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_UART_IRQHandler+0xd0>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	f043 0204 	orr.w	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00f      	beq.n	8002336 <HAL_UART_IRQHandler+0xfa>
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d104      	bne.n	800232a <HAL_UART_IRQHandler+0xee>
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	f043 0208 	orr.w	r2, r3, #8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d078      	beq.n	8002430 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_UART_IRQHandler+0x11c>
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f966 	bl	8002624 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf14      	ite	ne
 8002366:	2301      	movne	r3, #1
 8002368:	2300      	moveq	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <HAL_UART_IRQHandler+0x144>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d031      	beq.n	80023e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f8b7 	bl	80024f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b0:	4a21      	ldr	r2, [pc, #132]	; (8002438 <HAL_UART_IRQHandler+0x1fc>)
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fd51 	bl	8000e60 <HAL_DMA_Abort_IT>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d016      	beq.n	80023f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023ce:	4610      	mov	r0, r2
 80023d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d2:	e00e      	b.n	80023f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f83a 	bl	800244e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023da:	e00a      	b.n	80023f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f836 	bl	800244e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e2:	e006      	b.n	80023f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f832 	bl	800244e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80023f0:	e01e      	b.n	8002430 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f2:	bf00      	nop
    return;
 80023f4:	e01c      	b.n	8002430 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_UART_IRQHandler+0x1d6>
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f8a3 	bl	8002556 <UART_Transmit_IT>
    return;
 8002410:	e00f      	b.n	8002432 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_UART_IRQHandler+0x1f6>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8e4 	bl	80025f4 <UART_EndTransmit_IT>
    return;
 800242c:	bf00      	nop
 800242e:	e000      	b.n	8002432 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002430:	bf00      	nop
  }
}
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	0800252f 	.word	0x0800252f

0800243c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002470:	e02c      	b.n	80024cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d028      	beq.n	80024cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <UART_WaitOnFlagUntilTimeout+0x30>
 8002480:	f7fe fbb4 	bl	8000bec <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	429a      	cmp	r2, r3
 800248e:	d21d      	bcs.n	80024cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800249e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e00f      	b.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4013      	ands	r3, r2
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d0c3      	beq.n	8002472 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800250a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7ff ff80 	bl	800244e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b21      	cmp	r3, #33	; 0x21
 8002568:	d13e      	bne.n	80025e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002572:	d114      	bne.n	800259e <UART_Transmit_IT+0x48>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d110      	bne.n	800259e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002590:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	1c9a      	adds	r2, r3, #2
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	621a      	str	r2, [r3, #32]
 800259c:	e008      	b.n	80025b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	1c59      	adds	r1, r3, #1
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6211      	str	r1, [r2, #32]
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4619      	mov	r1, r3
 80025be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10f      	bne.n	80025e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e000      	b.n	80025ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
  }
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff11 	bl	800243c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b22      	cmp	r3, #34	; 0x22
 8002636:	d170      	bne.n	800271a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002640:	d117      	bne.n	8002672 <UART_Receive_IT+0x4e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d113      	bne.n	8002672 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002660:	b29a      	uxth	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	1c9a      	adds	r2, r3, #2
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
 8002670:	e026      	b.n	80026c0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002684:	d007      	beq.n	8002696 <UART_Receive_IT+0x72>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10a      	bne.n	80026a4 <UART_Receive_IT+0x80>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	701a      	strb	r2, [r3, #0]
 80026a2:	e008      	b.n	80026b6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4619      	mov	r1, r3
 80026ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d120      	bne.n	8002716 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0220 	bic.w	r2, r2, #32
 80026e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7fd fea5 	bl	800045c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e002      	b.n	800271c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
  }
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800275e:	f023 030c 	bic.w	r3, r3, #12
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	430b      	orrs	r3, r1
 800276a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2c      	ldr	r2, [pc, #176]	; (8002838 <UART_SetConfig+0x114>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d103      	bne.n	8002794 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800278c:	f7ff f952 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	e002      	b.n	800279a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002794:	f7ff f93a 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8002798:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	009a      	lsls	r2, r3, #2
 80027a4:	441a      	add	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	4a22      	ldr	r2, [pc, #136]	; (800283c <UART_SetConfig+0x118>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	0119      	lsls	r1, r3, #4
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009a      	lsls	r2, r3, #2
 80027c4:	441a      	add	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <UART_SetConfig+0x118>)
 80027d2:	fba3 0302 	umull	r0, r3, r3, r2
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2064      	movs	r0, #100	; 0x64
 80027da:	fb00 f303 	mul.w	r3, r0, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	3332      	adds	r3, #50	; 0x32
 80027e4:	4a15      	ldr	r2, [pc, #84]	; (800283c <UART_SetConfig+0x118>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f0:	4419      	add	r1, r3
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fbb2 f2f3 	udiv	r2, r2, r3
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <UART_SetConfig+0x118>)
 800280a:	fba3 0302 	umull	r0, r3, r3, r2
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2064      	movs	r0, #100	; 0x64
 8002812:	fb00 f303 	mul.w	r3, r0, r3
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	3332      	adds	r3, #50	; 0x32
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <UART_SetConfig+0x118>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	f003 020f 	and.w	r2, r3, #15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	440a      	add	r2, r1
 800282e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40013800 	.word	0x40013800
 800283c:	51eb851f 	.word	0x51eb851f

08002840 <__errno>:
 8002840:	4b01      	ldr	r3, [pc, #4]	; (8002848 <__errno+0x8>)
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	2000000c 	.word	0x2000000c

0800284c <__libc_init_array>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	2500      	movs	r5, #0
 8002850:	4e0c      	ldr	r6, [pc, #48]	; (8002884 <__libc_init_array+0x38>)
 8002852:	4c0d      	ldr	r4, [pc, #52]	; (8002888 <__libc_init_array+0x3c>)
 8002854:	1ba4      	subs	r4, r4, r6
 8002856:	10a4      	asrs	r4, r4, #2
 8002858:	42a5      	cmp	r5, r4
 800285a:	d109      	bne.n	8002870 <__libc_init_array+0x24>
 800285c:	f000 fc34 	bl	80030c8 <_init>
 8002860:	2500      	movs	r5, #0
 8002862:	4e0a      	ldr	r6, [pc, #40]	; (800288c <__libc_init_array+0x40>)
 8002864:	4c0a      	ldr	r4, [pc, #40]	; (8002890 <__libc_init_array+0x44>)
 8002866:	1ba4      	subs	r4, r4, r6
 8002868:	10a4      	asrs	r4, r4, #2
 800286a:	42a5      	cmp	r5, r4
 800286c:	d105      	bne.n	800287a <__libc_init_array+0x2e>
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002874:	4798      	blx	r3
 8002876:	3501      	adds	r5, #1
 8002878:	e7ee      	b.n	8002858 <__libc_init_array+0xc>
 800287a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800287e:	4798      	blx	r3
 8002880:	3501      	adds	r5, #1
 8002882:	e7f2      	b.n	800286a <__libc_init_array+0x1e>
 8002884:	08003204 	.word	0x08003204
 8002888:	08003204 	.word	0x08003204
 800288c:	08003204 	.word	0x08003204
 8002890:	08003208 	.word	0x08003208

08002894 <memset>:
 8002894:	4603      	mov	r3, r0
 8002896:	4402      	add	r2, r0
 8002898:	4293      	cmp	r3, r2
 800289a:	d100      	bne.n	800289e <memset+0xa>
 800289c:	4770      	bx	lr
 800289e:	f803 1b01 	strb.w	r1, [r3], #1
 80028a2:	e7f9      	b.n	8002898 <memset+0x4>

080028a4 <siprintf>:
 80028a4:	b40e      	push	{r1, r2, r3}
 80028a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028aa:	b500      	push	{lr}
 80028ac:	b09c      	sub	sp, #112	; 0x70
 80028ae:	ab1d      	add	r3, sp, #116	; 0x74
 80028b0:	9002      	str	r0, [sp, #8]
 80028b2:	9006      	str	r0, [sp, #24]
 80028b4:	9107      	str	r1, [sp, #28]
 80028b6:	9104      	str	r1, [sp, #16]
 80028b8:	4808      	ldr	r0, [pc, #32]	; (80028dc <siprintf+0x38>)
 80028ba:	4909      	ldr	r1, [pc, #36]	; (80028e0 <siprintf+0x3c>)
 80028bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80028c0:	9105      	str	r1, [sp, #20]
 80028c2:	6800      	ldr	r0, [r0, #0]
 80028c4:	a902      	add	r1, sp, #8
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	f000 f866 	bl	8002998 <_svfiprintf_r>
 80028cc:	2200      	movs	r2, #0
 80028ce:	9b02      	ldr	r3, [sp, #8]
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	b01c      	add	sp, #112	; 0x70
 80028d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80028d8:	b003      	add	sp, #12
 80028da:	4770      	bx	lr
 80028dc:	2000000c 	.word	0x2000000c
 80028e0:	ffff0208 	.word	0xffff0208

080028e4 <__ssputs_r>:
 80028e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e8:	688e      	ldr	r6, [r1, #8]
 80028ea:	4682      	mov	sl, r0
 80028ec:	429e      	cmp	r6, r3
 80028ee:	460c      	mov	r4, r1
 80028f0:	4690      	mov	r8, r2
 80028f2:	4699      	mov	r9, r3
 80028f4:	d837      	bhi.n	8002966 <__ssputs_r+0x82>
 80028f6:	898a      	ldrh	r2, [r1, #12]
 80028f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028fc:	d031      	beq.n	8002962 <__ssputs_r+0x7e>
 80028fe:	2302      	movs	r3, #2
 8002900:	6825      	ldr	r5, [r4, #0]
 8002902:	6909      	ldr	r1, [r1, #16]
 8002904:	1a6f      	subs	r7, r5, r1
 8002906:	6965      	ldr	r5, [r4, #20]
 8002908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800290c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002910:	f109 0301 	add.w	r3, r9, #1
 8002914:	443b      	add	r3, r7
 8002916:	429d      	cmp	r5, r3
 8002918:	bf38      	it	cc
 800291a:	461d      	movcc	r5, r3
 800291c:	0553      	lsls	r3, r2, #21
 800291e:	d530      	bpl.n	8002982 <__ssputs_r+0x9e>
 8002920:	4629      	mov	r1, r5
 8002922:	f000 fb37 	bl	8002f94 <_malloc_r>
 8002926:	4606      	mov	r6, r0
 8002928:	b950      	cbnz	r0, 8002940 <__ssputs_r+0x5c>
 800292a:	230c      	movs	r3, #12
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f8ca 3000 	str.w	r3, [sl]
 8002934:	89a3      	ldrh	r3, [r4, #12]
 8002936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800293a:	81a3      	strh	r3, [r4, #12]
 800293c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002940:	463a      	mov	r2, r7
 8002942:	6921      	ldr	r1, [r4, #16]
 8002944:	f000 fab6 	bl	8002eb4 <memcpy>
 8002948:	89a3      	ldrh	r3, [r4, #12]
 800294a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800294e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002952:	81a3      	strh	r3, [r4, #12]
 8002954:	6126      	str	r6, [r4, #16]
 8002956:	443e      	add	r6, r7
 8002958:	6026      	str	r6, [r4, #0]
 800295a:	464e      	mov	r6, r9
 800295c:	6165      	str	r5, [r4, #20]
 800295e:	1bed      	subs	r5, r5, r7
 8002960:	60a5      	str	r5, [r4, #8]
 8002962:	454e      	cmp	r6, r9
 8002964:	d900      	bls.n	8002968 <__ssputs_r+0x84>
 8002966:	464e      	mov	r6, r9
 8002968:	4632      	mov	r2, r6
 800296a:	4641      	mov	r1, r8
 800296c:	6820      	ldr	r0, [r4, #0]
 800296e:	f000 faac 	bl	8002eca <memmove>
 8002972:	68a3      	ldr	r3, [r4, #8]
 8002974:	2000      	movs	r0, #0
 8002976:	1b9b      	subs	r3, r3, r6
 8002978:	60a3      	str	r3, [r4, #8]
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	441e      	add	r6, r3
 800297e:	6026      	str	r6, [r4, #0]
 8002980:	e7dc      	b.n	800293c <__ssputs_r+0x58>
 8002982:	462a      	mov	r2, r5
 8002984:	f000 fb60 	bl	8003048 <_realloc_r>
 8002988:	4606      	mov	r6, r0
 800298a:	2800      	cmp	r0, #0
 800298c:	d1e2      	bne.n	8002954 <__ssputs_r+0x70>
 800298e:	6921      	ldr	r1, [r4, #16]
 8002990:	4650      	mov	r0, sl
 8002992:	f000 fab3 	bl	8002efc <_free_r>
 8002996:	e7c8      	b.n	800292a <__ssputs_r+0x46>

08002998 <_svfiprintf_r>:
 8002998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299c:	461d      	mov	r5, r3
 800299e:	898b      	ldrh	r3, [r1, #12]
 80029a0:	b09d      	sub	sp, #116	; 0x74
 80029a2:	061f      	lsls	r7, r3, #24
 80029a4:	4680      	mov	r8, r0
 80029a6:	460c      	mov	r4, r1
 80029a8:	4616      	mov	r6, r2
 80029aa:	d50f      	bpl.n	80029cc <_svfiprintf_r+0x34>
 80029ac:	690b      	ldr	r3, [r1, #16]
 80029ae:	b96b      	cbnz	r3, 80029cc <_svfiprintf_r+0x34>
 80029b0:	2140      	movs	r1, #64	; 0x40
 80029b2:	f000 faef 	bl	8002f94 <_malloc_r>
 80029b6:	6020      	str	r0, [r4, #0]
 80029b8:	6120      	str	r0, [r4, #16]
 80029ba:	b928      	cbnz	r0, 80029c8 <_svfiprintf_r+0x30>
 80029bc:	230c      	movs	r3, #12
 80029be:	f8c8 3000 	str.w	r3, [r8]
 80029c2:	f04f 30ff 	mov.w	r0, #4294967295
 80029c6:	e0c8      	b.n	8002b5a <_svfiprintf_r+0x1c2>
 80029c8:	2340      	movs	r3, #64	; 0x40
 80029ca:	6163      	str	r3, [r4, #20]
 80029cc:	2300      	movs	r3, #0
 80029ce:	9309      	str	r3, [sp, #36]	; 0x24
 80029d0:	2320      	movs	r3, #32
 80029d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029d6:	2330      	movs	r3, #48	; 0x30
 80029d8:	f04f 0b01 	mov.w	fp, #1
 80029dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029e0:	9503      	str	r5, [sp, #12]
 80029e2:	4637      	mov	r7, r6
 80029e4:	463d      	mov	r5, r7
 80029e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80029ea:	b10b      	cbz	r3, 80029f0 <_svfiprintf_r+0x58>
 80029ec:	2b25      	cmp	r3, #37	; 0x25
 80029ee:	d13e      	bne.n	8002a6e <_svfiprintf_r+0xd6>
 80029f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80029f4:	d00b      	beq.n	8002a0e <_svfiprintf_r+0x76>
 80029f6:	4653      	mov	r3, sl
 80029f8:	4632      	mov	r2, r6
 80029fa:	4621      	mov	r1, r4
 80029fc:	4640      	mov	r0, r8
 80029fe:	f7ff ff71 	bl	80028e4 <__ssputs_r>
 8002a02:	3001      	adds	r0, #1
 8002a04:	f000 80a4 	beq.w	8002b50 <_svfiprintf_r+0x1b8>
 8002a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a0a:	4453      	add	r3, sl
 8002a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a0e:	783b      	ldrb	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 809d 	beq.w	8002b50 <_svfiprintf_r+0x1b8>
 8002a16:	2300      	movs	r3, #0
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a20:	9304      	str	r3, [sp, #16]
 8002a22:	9307      	str	r3, [sp, #28]
 8002a24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a28:	931a      	str	r3, [sp, #104]	; 0x68
 8002a2a:	462f      	mov	r7, r5
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002a32:	4850      	ldr	r0, [pc, #320]	; (8002b74 <_svfiprintf_r+0x1dc>)
 8002a34:	f000 fa30 	bl	8002e98 <memchr>
 8002a38:	9b04      	ldr	r3, [sp, #16]
 8002a3a:	b9d0      	cbnz	r0, 8002a72 <_svfiprintf_r+0xda>
 8002a3c:	06d9      	lsls	r1, r3, #27
 8002a3e:	bf44      	itt	mi
 8002a40:	2220      	movmi	r2, #32
 8002a42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a46:	071a      	lsls	r2, r3, #28
 8002a48:	bf44      	itt	mi
 8002a4a:	222b      	movmi	r2, #43	; 0x2b
 8002a4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a50:	782a      	ldrb	r2, [r5, #0]
 8002a52:	2a2a      	cmp	r2, #42	; 0x2a
 8002a54:	d015      	beq.n	8002a82 <_svfiprintf_r+0xea>
 8002a56:	462f      	mov	r7, r5
 8002a58:	2000      	movs	r0, #0
 8002a5a:	250a      	movs	r5, #10
 8002a5c:	9a07      	ldr	r2, [sp, #28]
 8002a5e:	4639      	mov	r1, r7
 8002a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a64:	3b30      	subs	r3, #48	; 0x30
 8002a66:	2b09      	cmp	r3, #9
 8002a68:	d94d      	bls.n	8002b06 <_svfiprintf_r+0x16e>
 8002a6a:	b1b8      	cbz	r0, 8002a9c <_svfiprintf_r+0x104>
 8002a6c:	e00f      	b.n	8002a8e <_svfiprintf_r+0xf6>
 8002a6e:	462f      	mov	r7, r5
 8002a70:	e7b8      	b.n	80029e4 <_svfiprintf_r+0x4c>
 8002a72:	4a40      	ldr	r2, [pc, #256]	; (8002b74 <_svfiprintf_r+0x1dc>)
 8002a74:	463d      	mov	r5, r7
 8002a76:	1a80      	subs	r0, r0, r2
 8002a78:	fa0b f000 	lsl.w	r0, fp, r0
 8002a7c:	4318      	orrs	r0, r3
 8002a7e:	9004      	str	r0, [sp, #16]
 8002a80:	e7d3      	b.n	8002a2a <_svfiprintf_r+0x92>
 8002a82:	9a03      	ldr	r2, [sp, #12]
 8002a84:	1d11      	adds	r1, r2, #4
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	9103      	str	r1, [sp, #12]
 8002a8a:	2a00      	cmp	r2, #0
 8002a8c:	db01      	blt.n	8002a92 <_svfiprintf_r+0xfa>
 8002a8e:	9207      	str	r2, [sp, #28]
 8002a90:	e004      	b.n	8002a9c <_svfiprintf_r+0x104>
 8002a92:	4252      	negs	r2, r2
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	9207      	str	r2, [sp, #28]
 8002a9a:	9304      	str	r3, [sp, #16]
 8002a9c:	783b      	ldrb	r3, [r7, #0]
 8002a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002aa0:	d10c      	bne.n	8002abc <_svfiprintf_r+0x124>
 8002aa2:	787b      	ldrb	r3, [r7, #1]
 8002aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8002aa6:	d133      	bne.n	8002b10 <_svfiprintf_r+0x178>
 8002aa8:	9b03      	ldr	r3, [sp, #12]
 8002aaa:	3702      	adds	r7, #2
 8002aac:	1d1a      	adds	r2, r3, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	9203      	str	r2, [sp, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bfb8      	it	lt
 8002ab6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002aba:	9305      	str	r3, [sp, #20]
 8002abc:	4d2e      	ldr	r5, [pc, #184]	; (8002b78 <_svfiprintf_r+0x1e0>)
 8002abe:	2203      	movs	r2, #3
 8002ac0:	7839      	ldrb	r1, [r7, #0]
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f000 f9e8 	bl	8002e98 <memchr>
 8002ac8:	b138      	cbz	r0, 8002ada <_svfiprintf_r+0x142>
 8002aca:	2340      	movs	r3, #64	; 0x40
 8002acc:	1b40      	subs	r0, r0, r5
 8002ace:	fa03 f000 	lsl.w	r0, r3, r0
 8002ad2:	9b04      	ldr	r3, [sp, #16]
 8002ad4:	3701      	adds	r7, #1
 8002ad6:	4303      	orrs	r3, r0
 8002ad8:	9304      	str	r3, [sp, #16]
 8002ada:	7839      	ldrb	r1, [r7, #0]
 8002adc:	2206      	movs	r2, #6
 8002ade:	4827      	ldr	r0, [pc, #156]	; (8002b7c <_svfiprintf_r+0x1e4>)
 8002ae0:	1c7e      	adds	r6, r7, #1
 8002ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ae6:	f000 f9d7 	bl	8002e98 <memchr>
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d038      	beq.n	8002b60 <_svfiprintf_r+0x1c8>
 8002aee:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <_svfiprintf_r+0x1e8>)
 8002af0:	bb13      	cbnz	r3, 8002b38 <_svfiprintf_r+0x1a0>
 8002af2:	9b03      	ldr	r3, [sp, #12]
 8002af4:	3307      	adds	r3, #7
 8002af6:	f023 0307 	bic.w	r3, r3, #7
 8002afa:	3308      	adds	r3, #8
 8002afc:	9303      	str	r3, [sp, #12]
 8002afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b00:	444b      	add	r3, r9
 8002b02:	9309      	str	r3, [sp, #36]	; 0x24
 8002b04:	e76d      	b.n	80029e2 <_svfiprintf_r+0x4a>
 8002b06:	fb05 3202 	mla	r2, r5, r2, r3
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	460f      	mov	r7, r1
 8002b0e:	e7a6      	b.n	8002a5e <_svfiprintf_r+0xc6>
 8002b10:	2300      	movs	r3, #0
 8002b12:	250a      	movs	r5, #10
 8002b14:	4619      	mov	r1, r3
 8002b16:	3701      	adds	r7, #1
 8002b18:	9305      	str	r3, [sp, #20]
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b20:	3a30      	subs	r2, #48	; 0x30
 8002b22:	2a09      	cmp	r2, #9
 8002b24:	d903      	bls.n	8002b2e <_svfiprintf_r+0x196>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0c8      	beq.n	8002abc <_svfiprintf_r+0x124>
 8002b2a:	9105      	str	r1, [sp, #20]
 8002b2c:	e7c6      	b.n	8002abc <_svfiprintf_r+0x124>
 8002b2e:	fb05 2101 	mla	r1, r5, r1, r2
 8002b32:	2301      	movs	r3, #1
 8002b34:	4607      	mov	r7, r0
 8002b36:	e7f0      	b.n	8002b1a <_svfiprintf_r+0x182>
 8002b38:	ab03      	add	r3, sp, #12
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <_svfiprintf_r+0x1ec>)
 8002b40:	a904      	add	r1, sp, #16
 8002b42:	4640      	mov	r0, r8
 8002b44:	f3af 8000 	nop.w
 8002b48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b4c:	4681      	mov	r9, r0
 8002b4e:	d1d6      	bne.n	8002afe <_svfiprintf_r+0x166>
 8002b50:	89a3      	ldrh	r3, [r4, #12]
 8002b52:	065b      	lsls	r3, r3, #25
 8002b54:	f53f af35 	bmi.w	80029c2 <_svfiprintf_r+0x2a>
 8002b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b5a:	b01d      	add	sp, #116	; 0x74
 8002b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b60:	ab03      	add	r3, sp, #12
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4622      	mov	r2, r4
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <_svfiprintf_r+0x1ec>)
 8002b68:	a904      	add	r1, sp, #16
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	f000 f882 	bl	8002c74 <_printf_i>
 8002b70:	e7ea      	b.n	8002b48 <_svfiprintf_r+0x1b0>
 8002b72:	bf00      	nop
 8002b74:	080031d0 	.word	0x080031d0
 8002b78:	080031d6 	.word	0x080031d6
 8002b7c:	080031da 	.word	0x080031da
 8002b80:	00000000 	.word	0x00000000
 8002b84:	080028e5 	.word	0x080028e5

08002b88 <_printf_common>:
 8002b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b8c:	4691      	mov	r9, r2
 8002b8e:	461f      	mov	r7, r3
 8002b90:	688a      	ldr	r2, [r1, #8]
 8002b92:	690b      	ldr	r3, [r1, #16]
 8002b94:	4606      	mov	r6, r0
 8002b96:	4293      	cmp	r3, r2
 8002b98:	bfb8      	it	lt
 8002b9a:	4613      	movlt	r3, r2
 8002b9c:	f8c9 3000 	str.w	r3, [r9]
 8002ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ba4:	460c      	mov	r4, r1
 8002ba6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002baa:	b112      	cbz	r2, 8002bb2 <_printf_common+0x2a>
 8002bac:	3301      	adds	r3, #1
 8002bae:	f8c9 3000 	str.w	r3, [r9]
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	0699      	lsls	r1, r3, #26
 8002bb6:	bf42      	ittt	mi
 8002bb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002bbc:	3302      	addmi	r3, #2
 8002bbe:	f8c9 3000 	strmi.w	r3, [r9]
 8002bc2:	6825      	ldr	r5, [r4, #0]
 8002bc4:	f015 0506 	ands.w	r5, r5, #6
 8002bc8:	d107      	bne.n	8002bda <_printf_common+0x52>
 8002bca:	f104 0a19 	add.w	sl, r4, #25
 8002bce:	68e3      	ldr	r3, [r4, #12]
 8002bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	42ab      	cmp	r3, r5
 8002bd8:	dc29      	bgt.n	8002c2e <_printf_common+0xa6>
 8002bda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002bde:	6822      	ldr	r2, [r4, #0]
 8002be0:	3300      	adds	r3, #0
 8002be2:	bf18      	it	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	0692      	lsls	r2, r2, #26
 8002be8:	d42e      	bmi.n	8002c48 <_printf_common+0xc0>
 8002bea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bee:	4639      	mov	r1, r7
 8002bf0:	4630      	mov	r0, r6
 8002bf2:	47c0      	blx	r8
 8002bf4:	3001      	adds	r0, #1
 8002bf6:	d021      	beq.n	8002c3c <_printf_common+0xb4>
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	68e5      	ldr	r5, [r4, #12]
 8002bfc:	f003 0306 	and.w	r3, r3, #6
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	bf18      	it	ne
 8002c04:	2500      	movne	r5, #0
 8002c06:	f8d9 2000 	ldr.w	r2, [r9]
 8002c0a:	f04f 0900 	mov.w	r9, #0
 8002c0e:	bf08      	it	eq
 8002c10:	1aad      	subeq	r5, r5, r2
 8002c12:	68a3      	ldr	r3, [r4, #8]
 8002c14:	6922      	ldr	r2, [r4, #16]
 8002c16:	bf08      	it	eq
 8002c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bfc4      	itt	gt
 8002c20:	1a9b      	subgt	r3, r3, r2
 8002c22:	18ed      	addgt	r5, r5, r3
 8002c24:	341a      	adds	r4, #26
 8002c26:	454d      	cmp	r5, r9
 8002c28:	d11a      	bne.n	8002c60 <_printf_common+0xd8>
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	e008      	b.n	8002c40 <_printf_common+0xb8>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	4652      	mov	r2, sl
 8002c32:	4639      	mov	r1, r7
 8002c34:	4630      	mov	r0, r6
 8002c36:	47c0      	blx	r8
 8002c38:	3001      	adds	r0, #1
 8002c3a:	d103      	bne.n	8002c44 <_printf_common+0xbc>
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c44:	3501      	adds	r5, #1
 8002c46:	e7c2      	b.n	8002bce <_printf_common+0x46>
 8002c48:	2030      	movs	r0, #48	; 0x30
 8002c4a:	18e1      	adds	r1, r4, r3
 8002c4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c56:	4422      	add	r2, r4
 8002c58:	3302      	adds	r3, #2
 8002c5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c5e:	e7c4      	b.n	8002bea <_printf_common+0x62>
 8002c60:	2301      	movs	r3, #1
 8002c62:	4622      	mov	r2, r4
 8002c64:	4639      	mov	r1, r7
 8002c66:	4630      	mov	r0, r6
 8002c68:	47c0      	blx	r8
 8002c6a:	3001      	adds	r0, #1
 8002c6c:	d0e6      	beq.n	8002c3c <_printf_common+0xb4>
 8002c6e:	f109 0901 	add.w	r9, r9, #1
 8002c72:	e7d8      	b.n	8002c26 <_printf_common+0x9e>

08002c74 <_printf_i>:
 8002c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	7e09      	ldrb	r1, [r1, #24]
 8002c80:	b085      	sub	sp, #20
 8002c82:	296e      	cmp	r1, #110	; 0x6e
 8002c84:	4617      	mov	r7, r2
 8002c86:	4606      	mov	r6, r0
 8002c88:	4698      	mov	r8, r3
 8002c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c8c:	f000 80b3 	beq.w	8002df6 <_printf_i+0x182>
 8002c90:	d822      	bhi.n	8002cd8 <_printf_i+0x64>
 8002c92:	2963      	cmp	r1, #99	; 0x63
 8002c94:	d036      	beq.n	8002d04 <_printf_i+0x90>
 8002c96:	d80a      	bhi.n	8002cae <_printf_i+0x3a>
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	f000 80b9 	beq.w	8002e10 <_printf_i+0x19c>
 8002c9e:	2958      	cmp	r1, #88	; 0x58
 8002ca0:	f000 8083 	beq.w	8002daa <_printf_i+0x136>
 8002ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ca8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002cac:	e032      	b.n	8002d14 <_printf_i+0xa0>
 8002cae:	2964      	cmp	r1, #100	; 0x64
 8002cb0:	d001      	beq.n	8002cb6 <_printf_i+0x42>
 8002cb2:	2969      	cmp	r1, #105	; 0x69
 8002cb4:	d1f6      	bne.n	8002ca4 <_printf_i+0x30>
 8002cb6:	6820      	ldr	r0, [r4, #0]
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	0605      	lsls	r5, r0, #24
 8002cbc:	f103 0104 	add.w	r1, r3, #4
 8002cc0:	d52a      	bpl.n	8002d18 <_printf_i+0xa4>
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6011      	str	r1, [r2, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da03      	bge.n	8002cd2 <_printf_i+0x5e>
 8002cca:	222d      	movs	r2, #45	; 0x2d
 8002ccc:	425b      	negs	r3, r3
 8002cce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002cd2:	486f      	ldr	r0, [pc, #444]	; (8002e90 <_printf_i+0x21c>)
 8002cd4:	220a      	movs	r2, #10
 8002cd6:	e039      	b.n	8002d4c <_printf_i+0xd8>
 8002cd8:	2973      	cmp	r1, #115	; 0x73
 8002cda:	f000 809d 	beq.w	8002e18 <_printf_i+0x1a4>
 8002cde:	d808      	bhi.n	8002cf2 <_printf_i+0x7e>
 8002ce0:	296f      	cmp	r1, #111	; 0x6f
 8002ce2:	d020      	beq.n	8002d26 <_printf_i+0xb2>
 8002ce4:	2970      	cmp	r1, #112	; 0x70
 8002ce6:	d1dd      	bne.n	8002ca4 <_printf_i+0x30>
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	f043 0320 	orr.w	r3, r3, #32
 8002cee:	6023      	str	r3, [r4, #0]
 8002cf0:	e003      	b.n	8002cfa <_printf_i+0x86>
 8002cf2:	2975      	cmp	r1, #117	; 0x75
 8002cf4:	d017      	beq.n	8002d26 <_printf_i+0xb2>
 8002cf6:	2978      	cmp	r1, #120	; 0x78
 8002cf8:	d1d4      	bne.n	8002ca4 <_printf_i+0x30>
 8002cfa:	2378      	movs	r3, #120	; 0x78
 8002cfc:	4865      	ldr	r0, [pc, #404]	; (8002e94 <_printf_i+0x220>)
 8002cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d02:	e055      	b.n	8002db0 <_printf_i+0x13c>
 8002d04:	6813      	ldr	r3, [r2, #0]
 8002d06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d0a:	1d19      	adds	r1, r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6011      	str	r1, [r2, #0]
 8002d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d14:	2301      	movs	r3, #1
 8002d16:	e08c      	b.n	8002e32 <_printf_i+0x1be>
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d1e:	6011      	str	r1, [r2, #0]
 8002d20:	bf18      	it	ne
 8002d22:	b21b      	sxthne	r3, r3
 8002d24:	e7cf      	b.n	8002cc6 <_printf_i+0x52>
 8002d26:	6813      	ldr	r3, [r2, #0]
 8002d28:	6825      	ldr	r5, [r4, #0]
 8002d2a:	1d18      	adds	r0, r3, #4
 8002d2c:	6010      	str	r0, [r2, #0]
 8002d2e:	0628      	lsls	r0, r5, #24
 8002d30:	d501      	bpl.n	8002d36 <_printf_i+0xc2>
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	e002      	b.n	8002d3c <_printf_i+0xc8>
 8002d36:	0668      	lsls	r0, r5, #25
 8002d38:	d5fb      	bpl.n	8002d32 <_printf_i+0xbe>
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	296f      	cmp	r1, #111	; 0x6f
 8002d3e:	bf14      	ite	ne
 8002d40:	220a      	movne	r2, #10
 8002d42:	2208      	moveq	r2, #8
 8002d44:	4852      	ldr	r0, [pc, #328]	; (8002e90 <_printf_i+0x21c>)
 8002d46:	2100      	movs	r1, #0
 8002d48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d4c:	6865      	ldr	r5, [r4, #4]
 8002d4e:	2d00      	cmp	r5, #0
 8002d50:	60a5      	str	r5, [r4, #8]
 8002d52:	f2c0 8095 	blt.w	8002e80 <_printf_i+0x20c>
 8002d56:	6821      	ldr	r1, [r4, #0]
 8002d58:	f021 0104 	bic.w	r1, r1, #4
 8002d5c:	6021      	str	r1, [r4, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d13d      	bne.n	8002dde <_printf_i+0x16a>
 8002d62:	2d00      	cmp	r5, #0
 8002d64:	f040 808e 	bne.w	8002e84 <_printf_i+0x210>
 8002d68:	4665      	mov	r5, ip
 8002d6a:	2a08      	cmp	r2, #8
 8002d6c:	d10b      	bne.n	8002d86 <_printf_i+0x112>
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	07db      	lsls	r3, r3, #31
 8002d72:	d508      	bpl.n	8002d86 <_printf_i+0x112>
 8002d74:	6923      	ldr	r3, [r4, #16]
 8002d76:	6862      	ldr	r2, [r4, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	bfde      	ittt	le
 8002d7c:	2330      	movle	r3, #48	; 0x30
 8002d7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d86:	ebac 0305 	sub.w	r3, ip, r5
 8002d8a:	6123      	str	r3, [r4, #16]
 8002d8c:	f8cd 8000 	str.w	r8, [sp]
 8002d90:	463b      	mov	r3, r7
 8002d92:	aa03      	add	r2, sp, #12
 8002d94:	4621      	mov	r1, r4
 8002d96:	4630      	mov	r0, r6
 8002d98:	f7ff fef6 	bl	8002b88 <_printf_common>
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	d14d      	bne.n	8002e3c <_printf_i+0x1c8>
 8002da0:	f04f 30ff 	mov.w	r0, #4294967295
 8002da4:	b005      	add	sp, #20
 8002da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002daa:	4839      	ldr	r0, [pc, #228]	; (8002e90 <_printf_i+0x21c>)
 8002dac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002db0:	6813      	ldr	r3, [r2, #0]
 8002db2:	6821      	ldr	r1, [r4, #0]
 8002db4:	1d1d      	adds	r5, r3, #4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6015      	str	r5, [r2, #0]
 8002dba:	060a      	lsls	r2, r1, #24
 8002dbc:	d50b      	bpl.n	8002dd6 <_printf_i+0x162>
 8002dbe:	07ca      	lsls	r2, r1, #31
 8002dc0:	bf44      	itt	mi
 8002dc2:	f041 0120 	orrmi.w	r1, r1, #32
 8002dc6:	6021      	strmi	r1, [r4, #0]
 8002dc8:	b91b      	cbnz	r3, 8002dd2 <_printf_i+0x15e>
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	f022 0220 	bic.w	r2, r2, #32
 8002dd0:	6022      	str	r2, [r4, #0]
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	e7b7      	b.n	8002d46 <_printf_i+0xd2>
 8002dd6:	064d      	lsls	r5, r1, #25
 8002dd8:	bf48      	it	mi
 8002dda:	b29b      	uxthmi	r3, r3
 8002ddc:	e7ef      	b.n	8002dbe <_printf_i+0x14a>
 8002dde:	4665      	mov	r5, ip
 8002de0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002de4:	fb02 3311 	mls	r3, r2, r1, r3
 8002de8:	5cc3      	ldrb	r3, [r0, r3]
 8002dea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002dee:	460b      	mov	r3, r1
 8002df0:	2900      	cmp	r1, #0
 8002df2:	d1f5      	bne.n	8002de0 <_printf_i+0x16c>
 8002df4:	e7b9      	b.n	8002d6a <_printf_i+0xf6>
 8002df6:	6813      	ldr	r3, [r2, #0]
 8002df8:	6825      	ldr	r5, [r4, #0]
 8002dfa:	1d18      	adds	r0, r3, #4
 8002dfc:	6961      	ldr	r1, [r4, #20]
 8002dfe:	6010      	str	r0, [r2, #0]
 8002e00:	0628      	lsls	r0, r5, #24
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	d501      	bpl.n	8002e0a <_printf_i+0x196>
 8002e06:	6019      	str	r1, [r3, #0]
 8002e08:	e002      	b.n	8002e10 <_printf_i+0x19c>
 8002e0a:	066a      	lsls	r2, r5, #25
 8002e0c:	d5fb      	bpl.n	8002e06 <_printf_i+0x192>
 8002e0e:	8019      	strh	r1, [r3, #0]
 8002e10:	2300      	movs	r3, #0
 8002e12:	4665      	mov	r5, ip
 8002e14:	6123      	str	r3, [r4, #16]
 8002e16:	e7b9      	b.n	8002d8c <_printf_i+0x118>
 8002e18:	6813      	ldr	r3, [r2, #0]
 8002e1a:	1d19      	adds	r1, r3, #4
 8002e1c:	6011      	str	r1, [r2, #0]
 8002e1e:	681d      	ldr	r5, [r3, #0]
 8002e20:	6862      	ldr	r2, [r4, #4]
 8002e22:	2100      	movs	r1, #0
 8002e24:	4628      	mov	r0, r5
 8002e26:	f000 f837 	bl	8002e98 <memchr>
 8002e2a:	b108      	cbz	r0, 8002e30 <_printf_i+0x1bc>
 8002e2c:	1b40      	subs	r0, r0, r5
 8002e2e:	6060      	str	r0, [r4, #4]
 8002e30:	6863      	ldr	r3, [r4, #4]
 8002e32:	6123      	str	r3, [r4, #16]
 8002e34:	2300      	movs	r3, #0
 8002e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e3a:	e7a7      	b.n	8002d8c <_printf_i+0x118>
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	462a      	mov	r2, r5
 8002e40:	4639      	mov	r1, r7
 8002e42:	4630      	mov	r0, r6
 8002e44:	47c0      	blx	r8
 8002e46:	3001      	adds	r0, #1
 8002e48:	d0aa      	beq.n	8002da0 <_printf_i+0x12c>
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	079b      	lsls	r3, r3, #30
 8002e4e:	d413      	bmi.n	8002e78 <_printf_i+0x204>
 8002e50:	68e0      	ldr	r0, [r4, #12]
 8002e52:	9b03      	ldr	r3, [sp, #12]
 8002e54:	4298      	cmp	r0, r3
 8002e56:	bfb8      	it	lt
 8002e58:	4618      	movlt	r0, r3
 8002e5a:	e7a3      	b.n	8002da4 <_printf_i+0x130>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	464a      	mov	r2, r9
 8002e60:	4639      	mov	r1, r7
 8002e62:	4630      	mov	r0, r6
 8002e64:	47c0      	blx	r8
 8002e66:	3001      	adds	r0, #1
 8002e68:	d09a      	beq.n	8002da0 <_printf_i+0x12c>
 8002e6a:	3501      	adds	r5, #1
 8002e6c:	68e3      	ldr	r3, [r4, #12]
 8002e6e:	9a03      	ldr	r2, [sp, #12]
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	42ab      	cmp	r3, r5
 8002e74:	dcf2      	bgt.n	8002e5c <_printf_i+0x1e8>
 8002e76:	e7eb      	b.n	8002e50 <_printf_i+0x1dc>
 8002e78:	2500      	movs	r5, #0
 8002e7a:	f104 0919 	add.w	r9, r4, #25
 8002e7e:	e7f5      	b.n	8002e6c <_printf_i+0x1f8>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ac      	bne.n	8002dde <_printf_i+0x16a>
 8002e84:	7803      	ldrb	r3, [r0, #0]
 8002e86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e8e:	e76c      	b.n	8002d6a <_printf_i+0xf6>
 8002e90:	080031e1 	.word	0x080031e1
 8002e94:	080031f2 	.word	0x080031f2

08002e98 <memchr>:
 8002e98:	b510      	push	{r4, lr}
 8002e9a:	b2c9      	uxtb	r1, r1
 8002e9c:	4402      	add	r2, r0
 8002e9e:	4290      	cmp	r0, r2
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	d101      	bne.n	8002ea8 <memchr+0x10>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e003      	b.n	8002eb0 <memchr+0x18>
 8002ea8:	781c      	ldrb	r4, [r3, #0]
 8002eaa:	3001      	adds	r0, #1
 8002eac:	428c      	cmp	r4, r1
 8002eae:	d1f6      	bne.n	8002e9e <memchr+0x6>
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd10      	pop	{r4, pc}

08002eb4 <memcpy>:
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	1e43      	subs	r3, r0, #1
 8002eb8:	440a      	add	r2, r1
 8002eba:	4291      	cmp	r1, r2
 8002ebc:	d100      	bne.n	8002ec0 <memcpy+0xc>
 8002ebe:	bd10      	pop	{r4, pc}
 8002ec0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ec4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ec8:	e7f7      	b.n	8002eba <memcpy+0x6>

08002eca <memmove>:
 8002eca:	4288      	cmp	r0, r1
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	eb01 0302 	add.w	r3, r1, r2
 8002ed2:	d807      	bhi.n	8002ee4 <memmove+0x1a>
 8002ed4:	1e42      	subs	r2, r0, #1
 8002ed6:	4299      	cmp	r1, r3
 8002ed8:	d00a      	beq.n	8002ef0 <memmove+0x26>
 8002eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ede:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002ee2:	e7f8      	b.n	8002ed6 <memmove+0xc>
 8002ee4:	4283      	cmp	r3, r0
 8002ee6:	d9f5      	bls.n	8002ed4 <memmove+0xa>
 8002ee8:	1881      	adds	r1, r0, r2
 8002eea:	1ad2      	subs	r2, r2, r3
 8002eec:	42d3      	cmn	r3, r2
 8002eee:	d100      	bne.n	8002ef2 <memmove+0x28>
 8002ef0:	bd10      	pop	{r4, pc}
 8002ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ef6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002efa:	e7f7      	b.n	8002eec <memmove+0x22>

08002efc <_free_r>:
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	4605      	mov	r5, r0
 8002f00:	2900      	cmp	r1, #0
 8002f02:	d043      	beq.n	8002f8c <_free_r+0x90>
 8002f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f08:	1f0c      	subs	r4, r1, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bfb8      	it	lt
 8002f0e:	18e4      	addlt	r4, r4, r3
 8002f10:	f000 f8d0 	bl	80030b4 <__malloc_lock>
 8002f14:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <_free_r+0x94>)
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	4610      	mov	r0, r2
 8002f1a:	b933      	cbnz	r3, 8002f2a <_free_r+0x2e>
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	6014      	str	r4, [r2, #0]
 8002f20:	4628      	mov	r0, r5
 8002f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f26:	f000 b8c6 	b.w	80030b6 <__malloc_unlock>
 8002f2a:	42a3      	cmp	r3, r4
 8002f2c:	d90b      	bls.n	8002f46 <_free_r+0x4a>
 8002f2e:	6821      	ldr	r1, [r4, #0]
 8002f30:	1862      	adds	r2, r4, r1
 8002f32:	4293      	cmp	r3, r2
 8002f34:	bf01      	itttt	eq
 8002f36:	681a      	ldreq	r2, [r3, #0]
 8002f38:	685b      	ldreq	r3, [r3, #4]
 8002f3a:	1852      	addeq	r2, r2, r1
 8002f3c:	6022      	streq	r2, [r4, #0]
 8002f3e:	6063      	str	r3, [r4, #4]
 8002f40:	6004      	str	r4, [r0, #0]
 8002f42:	e7ed      	b.n	8002f20 <_free_r+0x24>
 8002f44:	4613      	mov	r3, r2
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	b10a      	cbz	r2, 8002f4e <_free_r+0x52>
 8002f4a:	42a2      	cmp	r2, r4
 8002f4c:	d9fa      	bls.n	8002f44 <_free_r+0x48>
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	1858      	adds	r0, r3, r1
 8002f52:	42a0      	cmp	r0, r4
 8002f54:	d10b      	bne.n	8002f6e <_free_r+0x72>
 8002f56:	6820      	ldr	r0, [r4, #0]
 8002f58:	4401      	add	r1, r0
 8002f5a:	1858      	adds	r0, r3, r1
 8002f5c:	4282      	cmp	r2, r0
 8002f5e:	6019      	str	r1, [r3, #0]
 8002f60:	d1de      	bne.n	8002f20 <_free_r+0x24>
 8002f62:	6810      	ldr	r0, [r2, #0]
 8002f64:	6852      	ldr	r2, [r2, #4]
 8002f66:	4401      	add	r1, r0
 8002f68:	6019      	str	r1, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	e7d8      	b.n	8002f20 <_free_r+0x24>
 8002f6e:	d902      	bls.n	8002f76 <_free_r+0x7a>
 8002f70:	230c      	movs	r3, #12
 8002f72:	602b      	str	r3, [r5, #0]
 8002f74:	e7d4      	b.n	8002f20 <_free_r+0x24>
 8002f76:	6820      	ldr	r0, [r4, #0]
 8002f78:	1821      	adds	r1, r4, r0
 8002f7a:	428a      	cmp	r2, r1
 8002f7c:	bf01      	itttt	eq
 8002f7e:	6811      	ldreq	r1, [r2, #0]
 8002f80:	6852      	ldreq	r2, [r2, #4]
 8002f82:	1809      	addeq	r1, r1, r0
 8002f84:	6021      	streq	r1, [r4, #0]
 8002f86:	6062      	str	r2, [r4, #4]
 8002f88:	605c      	str	r4, [r3, #4]
 8002f8a:	e7c9      	b.n	8002f20 <_free_r+0x24>
 8002f8c:	bd38      	pop	{r3, r4, r5, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000094 	.word	0x20000094

08002f94 <_malloc_r>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	1ccd      	adds	r5, r1, #3
 8002f98:	f025 0503 	bic.w	r5, r5, #3
 8002f9c:	3508      	adds	r5, #8
 8002f9e:	2d0c      	cmp	r5, #12
 8002fa0:	bf38      	it	cc
 8002fa2:	250c      	movcc	r5, #12
 8002fa4:	2d00      	cmp	r5, #0
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	db01      	blt.n	8002fae <_malloc_r+0x1a>
 8002faa:	42a9      	cmp	r1, r5
 8002fac:	d903      	bls.n	8002fb6 <_malloc_r+0x22>
 8002fae:	230c      	movs	r3, #12
 8002fb0:	6033      	str	r3, [r6, #0]
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
 8002fb6:	f000 f87d 	bl	80030b4 <__malloc_lock>
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <_malloc_r+0xac>)
 8002fbc:	6814      	ldr	r4, [r2, #0]
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	b991      	cbnz	r1, 8002fe8 <_malloc_r+0x54>
 8002fc2:	4c20      	ldr	r4, [pc, #128]	; (8003044 <_malloc_r+0xb0>)
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	b91b      	cbnz	r3, 8002fd0 <_malloc_r+0x3c>
 8002fc8:	4630      	mov	r0, r6
 8002fca:	f000 f863 	bl	8003094 <_sbrk_r>
 8002fce:	6020      	str	r0, [r4, #0]
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	f000 f85e 	bl	8003094 <_sbrk_r>
 8002fd8:	1c43      	adds	r3, r0, #1
 8002fda:	d124      	bne.n	8003026 <_malloc_r+0x92>
 8002fdc:	230c      	movs	r3, #12
 8002fde:	4630      	mov	r0, r6
 8002fe0:	6033      	str	r3, [r6, #0]
 8002fe2:	f000 f868 	bl	80030b6 <__malloc_unlock>
 8002fe6:	e7e4      	b.n	8002fb2 <_malloc_r+0x1e>
 8002fe8:	680b      	ldr	r3, [r1, #0]
 8002fea:	1b5b      	subs	r3, r3, r5
 8002fec:	d418      	bmi.n	8003020 <_malloc_r+0x8c>
 8002fee:	2b0b      	cmp	r3, #11
 8002ff0:	d90f      	bls.n	8003012 <_malloc_r+0x7e>
 8002ff2:	600b      	str	r3, [r1, #0]
 8002ff4:	18cc      	adds	r4, r1, r3
 8002ff6:	50cd      	str	r5, [r1, r3]
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	f000 f85c 	bl	80030b6 <__malloc_unlock>
 8002ffe:	f104 000b 	add.w	r0, r4, #11
 8003002:	1d23      	adds	r3, r4, #4
 8003004:	f020 0007 	bic.w	r0, r0, #7
 8003008:	1ac3      	subs	r3, r0, r3
 800300a:	d0d3      	beq.n	8002fb4 <_malloc_r+0x20>
 800300c:	425a      	negs	r2, r3
 800300e:	50e2      	str	r2, [r4, r3]
 8003010:	e7d0      	b.n	8002fb4 <_malloc_r+0x20>
 8003012:	684b      	ldr	r3, [r1, #4]
 8003014:	428c      	cmp	r4, r1
 8003016:	bf16      	itet	ne
 8003018:	6063      	strne	r3, [r4, #4]
 800301a:	6013      	streq	r3, [r2, #0]
 800301c:	460c      	movne	r4, r1
 800301e:	e7eb      	b.n	8002ff8 <_malloc_r+0x64>
 8003020:	460c      	mov	r4, r1
 8003022:	6849      	ldr	r1, [r1, #4]
 8003024:	e7cc      	b.n	8002fc0 <_malloc_r+0x2c>
 8003026:	1cc4      	adds	r4, r0, #3
 8003028:	f024 0403 	bic.w	r4, r4, #3
 800302c:	42a0      	cmp	r0, r4
 800302e:	d005      	beq.n	800303c <_malloc_r+0xa8>
 8003030:	1a21      	subs	r1, r4, r0
 8003032:	4630      	mov	r0, r6
 8003034:	f000 f82e 	bl	8003094 <_sbrk_r>
 8003038:	3001      	adds	r0, #1
 800303a:	d0cf      	beq.n	8002fdc <_malloc_r+0x48>
 800303c:	6025      	str	r5, [r4, #0]
 800303e:	e7db      	b.n	8002ff8 <_malloc_r+0x64>
 8003040:	20000094 	.word	0x20000094
 8003044:	20000098 	.word	0x20000098

08003048 <_realloc_r>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	4607      	mov	r7, r0
 800304c:	4614      	mov	r4, r2
 800304e:	460e      	mov	r6, r1
 8003050:	b921      	cbnz	r1, 800305c <_realloc_r+0x14>
 8003052:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003056:	4611      	mov	r1, r2
 8003058:	f7ff bf9c 	b.w	8002f94 <_malloc_r>
 800305c:	b922      	cbnz	r2, 8003068 <_realloc_r+0x20>
 800305e:	f7ff ff4d 	bl	8002efc <_free_r>
 8003062:	4625      	mov	r5, r4
 8003064:	4628      	mov	r0, r5
 8003066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003068:	f000 f826 	bl	80030b8 <_malloc_usable_size_r>
 800306c:	42a0      	cmp	r0, r4
 800306e:	d20f      	bcs.n	8003090 <_realloc_r+0x48>
 8003070:	4621      	mov	r1, r4
 8003072:	4638      	mov	r0, r7
 8003074:	f7ff ff8e 	bl	8002f94 <_malloc_r>
 8003078:	4605      	mov	r5, r0
 800307a:	2800      	cmp	r0, #0
 800307c:	d0f2      	beq.n	8003064 <_realloc_r+0x1c>
 800307e:	4631      	mov	r1, r6
 8003080:	4622      	mov	r2, r4
 8003082:	f7ff ff17 	bl	8002eb4 <memcpy>
 8003086:	4631      	mov	r1, r6
 8003088:	4638      	mov	r0, r7
 800308a:	f7ff ff37 	bl	8002efc <_free_r>
 800308e:	e7e9      	b.n	8003064 <_realloc_r+0x1c>
 8003090:	4635      	mov	r5, r6
 8003092:	e7e7      	b.n	8003064 <_realloc_r+0x1c>

08003094 <_sbrk_r>:
 8003094:	b538      	push	{r3, r4, r5, lr}
 8003096:	2300      	movs	r3, #0
 8003098:	4c05      	ldr	r4, [pc, #20]	; (80030b0 <_sbrk_r+0x1c>)
 800309a:	4605      	mov	r5, r0
 800309c:	4608      	mov	r0, r1
 800309e:	6023      	str	r3, [r4, #0]
 80030a0:	f7fd fcea 	bl	8000a78 <_sbrk>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d102      	bne.n	80030ae <_sbrk_r+0x1a>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	b103      	cbz	r3, 80030ae <_sbrk_r+0x1a>
 80030ac:	602b      	str	r3, [r5, #0]
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	200001f4 	.word	0x200001f4

080030b4 <__malloc_lock>:
 80030b4:	4770      	bx	lr

080030b6 <__malloc_unlock>:
 80030b6:	4770      	bx	lr

080030b8 <_malloc_usable_size_r>:
 80030b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030bc:	1f18      	subs	r0, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bfbc      	itt	lt
 80030c2:	580b      	ldrlt	r3, [r1, r0]
 80030c4:	18c0      	addlt	r0, r0, r3
 80030c6:	4770      	bx	lr

080030c8 <_init>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr

080030d4 <_fini>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr
